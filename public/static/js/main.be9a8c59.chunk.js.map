{"version":3,"sources":["contexts/ThemeContext.tsx","components/UI/ThemeToggle.tsx","components/Navigation/Navbar.tsx","store/SnippetsContext.tsx","components/UI/Layout.tsx","components/UI/Badge.tsx","components/UI/Card.tsx","components/UI/PageHeader.tsx","components/UI/Button.tsx","components/UI/EmptyState.tsx","utils/dateParser.ts","utils/badgeColor.ts","utils/findLanguage.ts","utils/searchParser.ts","components/Snippets/SnippetPin.tsx","components/Snippets/SnippetCard.tsx","components/Snippets/SnippetGrid.tsx","components/SearchBar.tsx","containers/Home.tsx","components/Snippets/SnippetCode.tsx","components/Snippets/SnippetDetails.tsx","components/Snippets/SnippetDocs.tsx","components/AI/AIExplainer.tsx","components/AI/AutoTagger.tsx","components/AI/CodeOptimizer.tsx","components/AI/CodeConverter.tsx","containers/Snippet.tsx","containers/Snippets.tsx","components/Snippets/SnippetForm.tsx","components/Snippets/SmartSnippetForm.tsx","containers/Editor.tsx","containers/SmartEditor.tsx","App.tsx","index.tsx"],"names":["ThemeContext","createContext","undefined","ThemeProvider","_ref","children","theme","setTheme","useState","savedTheme","localStorage","getItem","window","matchMedia","matches","useEffect","document","documentElement","setAttribute","body","classList","add","remove","setItem","_jsx","Provider","value","toggleTheme","prevTheme","newTheme","ThemeToggle","useTheme","context","useContext","Error","_jsxs","className","onClick","title","concat","Navbar","routes","clientRoutes","map","idx","name","dest","NavLink","exact","to","SnippetsContext","snippets","searchResults","currentSnippet","tagCount","getSnippets","getSnippetById","id","setSnippet","createSnippet","snippet","updateSnippet","isLocal","deleteSnippet","toggleSnippetPin","countTags","searchSnippets","query","SnippetsContextProvider","props","setSnippets","setSearchResults","setCurrentSnippet","setTagCount","history","useHistory","redirectOnError","push","axios","get","then","res","data","catch","err","find","s","put","oldSnippetIdx","findIndex","slice","pathname","state","from","post","confirm","delete","deletedSnippetIdx","_objectSpread","isPinned","console","log","Layout","style","paddingTop","paddingBottom","Badge","text","color","cursor","Card","classes","bodyClasses","parentClasses","childClasses","PageHeader","prevDest","prevState","Link","Button","outline","small","handler","type","disabled","elClasses","join","EmptyState","editorLink","dateParser","date","dayjs","extend","relativeTime","customParseFormat","dateFormat","test","toString","parsedDate","formatted","format","relative","fromNow","badgeColor","language","toLowerCase","charCodeAt","searchParser","rawQuery","tags","extractFilters","languages","replaceAll","trim","filter","filters","regex","RegExp","matcher","match","split","SnippetPin","Icon","path","mdiPin","size","mdiPinOutline","SnippetCard","description","code","createdAt","location","copyHandler","copy","SnippetGrid","SearchBar","inputRef","useRef","createElement","current","focus","placeholder","ref","onKeyUp","e","key","inputHandler","Home","length","Fragment","some","SnippetCode","syntax","search","aliases","alias","findLanguage","hljs","highlightAll","whiteSpace","borderRadius","SnippetDetails","updatedAt","creationDate","updateDate","tag","rowGap","protocol","host","rawUrl","SnippetDocs","ReactMarkdown","markdown","AIExplainer","aiExplanation","explanation","setExplanation","loading","setLoading","error","setError","async","response","success","_err$response","_err$response$data","AutoTagger","currentTags","onTagsGenerated","suggestedTags","setSuggestedTags","newTags","includes","addAllTags","updatedTags","index","t","addTag","CodeOptimizer","optimization","setOptimization","securityAnalysis","setSecurityAnalysis","optimizedCode","setOptimizedCode","activeTab","setActiveTab","generateOptimizedCode","focusArea","_err$response3","_err$response3$data","getSeverityBadge","severity","low","medium","high","critical","role","_err$response2","_err$response2$data","issues","riskLevel","issueCount","score","overallScore","complexity","level","maintainability","excellent","good","fair","poor","summary","issue","performance","readability","security","suggestion","originalCode","toUpperCase","securityIssues","maxHeight","overflow","POPULAR_LANGUAGES","CodeConverter","conversion","setConversion","comparison","setComparison","strategies","setStrategies","selectedTargetLanguage","setSelectedTargetLanguage","getConfidenceBadge","confidence","getLanguageDisplayName","lang","charAt","availableLanguages","width","minWidth","onChange","target","sourceLanguage","targetLanguage","targetLanguages","Object","keys","convertedCode","conversionNotes","note","warnings","warning","equivalentLibraries","entries","_ref2","sourceLib","targetLib","feature","sourceImplementation","targetImplementation","notes","_ref3","targetLang","strategy","Snippet","useParams","activeAITab","setActiveAITab","useLocation","docs","Snippets","setFilter","localSnippets","setLocalSnippets","isActiveFilter","filteredSnippets","filterHandler","transition","backgroundColor","onMouseEnter","currentTarget","onMouseLeave","count","clearFilterHandler","SnippetForm","inEdit","formData","setFormData","useAI","setUseAI","onSubmit","preventDefault","submissionData","formHandler","htmlFor","required","stringToTags","rows","checked","SmartSnippetForm","_editableData$tags","_editableData$tags2","setCode","generatedData","setGeneratedData","isGenerating","setIsGenerating","isEditing","setIsEditing","editableData","setEditableData","handleEditableChange","field","prev","generated","reset","tagsString","handleTagsChange","handleSubmit","Editor","setInEdit","useSmartMode","setUseSmartMode","toggleMode","SmartEditor","App","BrowserRouter","Switch","Route","component","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.be9a8c59.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    // Check localStorage for saved theme preference\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme === 'light' || savedTheme === 'dark') {\r\n      return savedTheme;\r\n    }\r\n    // Check system preference\r\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n    return 'light';\r\n  });\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => {\r\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\r\n      localStorage.setItem('theme', newTheme);\r\n      return newTheme;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Apply theme to document\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    document.body.setAttribute('data-theme', theme);\r\n    \r\n    // Update body classes for additional styling hooks\r\n    if (theme === 'dark') {\r\n      document.body.classList.add('dark-theme');\r\n      document.body.classList.remove('light-theme');\r\n    } else {\r\n      document.body.classList.add('light-theme');\r\n      document.body.classList.remove('dark-theme');\r\n    }\r\n    \r\n    // Save theme preference\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\n\r\nconst ThemeToggle: React.FC = () => {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <button\r\n      className=\"theme-toggle-btn btn btn-sm ms-2\"\r\n      onClick={toggleTheme}\r\n      title={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}\r\n      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}\r\n    >\r\n      <i className={`fas ${theme === 'light' ? 'fa-moon' : 'fa-sun'} me-2`}></i>\r\n      <span className=\"theme-text\">\r\n        {theme === 'light' ? 'Dark' : 'Light'}\r\n      </span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","import { NavLink } from 'react-router-dom';\r\nimport { Route } from '../../typescript/interfaces';\r\nimport { routes as clientRoutes } from './routes.json';\r\nimport ThemeToggle from '../UI/ThemeToggle';\r\n\r\nexport const Navbar = (): JSX.Element => {\r\n  const routes = clientRoutes as Route[];\r\n\r\n  return (\r\n    <nav className='navbar navbar-expand'>\r\n      <div className='container-fluid'>\r\n        <ul className='navbar-nav'>\r\n          {routes.map(({ name, dest }, idx) => (\r\n            <li className='nav-item' key={idx}>\r\n              <NavLink exact to={dest} className='nav-link'>\r\n                {name}\r\n              </NavLink>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div className='navbar-nav ms-auto'>\r\n          <ThemeToggle />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import { useState, createContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Context,\r\n  Snippet,\r\n  Response,\r\n  TagCount,\r\n  NewSnippet,\r\n  SearchQuery\r\n} from '../typescript/interfaces';\r\n\r\nexport const SnippetsContext = createContext<Context>({\r\n  snippets: [],\r\n  searchResults: [],\r\n  currentSnippet: null,\r\n  tagCount: [],\r\n  getSnippets: () => {},\r\n  getSnippetById: (id: number) => {},\r\n  setSnippet: (id: number) => {},\r\n  createSnippet: (snippet: NewSnippet) => {},\r\n  updateSnippet: (snippet: NewSnippet, id: number, isLocal?: boolean) => {},\r\n  deleteSnippet: (id: number) => {},\r\n  toggleSnippetPin: (id: number) => {},\r\n  countTags: () => {},\r\n  searchSnippets: (query: SearchQuery) => {}\r\n});\r\n\r\ninterface Props {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport const SnippetsContextProvider = (props: Props): JSX.Element => {\r\n  const [snippets, setSnippets] = useState<Snippet[]>([]);\r\n  const [searchResults, setSearchResults] = useState<Snippet[]>([]);\r\n  const [currentSnippet, setCurrentSnippet] = useState<Snippet | null>(null);\r\n  const [tagCount, setTagCount] = useState<TagCount[]>([]);\r\n\r\n  const history = useHistory();\r\n\r\n  const redirectOnError = () => {\r\n    history.push('/');\r\n  };\r\n\r\n  const getSnippets = (): void => {\r\n    axios\r\n      .get<Response<Snippet[]>>('/api/snippets')\r\n      .then(res => setSnippets(res.data.data))\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const getSnippetById = (id: number): void => {\r\n    axios\r\n      .get<Response<Snippet>>(`/api/snippets/${id}`)\r\n      .then(res => setCurrentSnippet(res.data.data))\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const setSnippet = (id: number): void => {\r\n    if (id < 0) {\r\n      setCurrentSnippet(null);\r\n      return;\r\n    }\r\n\r\n    getSnippetById(id);\r\n\r\n    const snippet = snippets.find(s => s.id === id);\r\n\r\n    if (snippet) {\r\n      setCurrentSnippet(snippet);\r\n    }\r\n  };\r\n\r\n  const createSnippet = (snippet: NewSnippet): void => {\r\n    axios\r\n      .post<Response<Snippet>>('/api/snippets', snippet)\r\n      .then(res => {\r\n        setSnippets([...snippets, res.data.data]);\r\n        setCurrentSnippet(res.data.data);\r\n        history.push({\r\n          pathname: `/snippet/${res.data.data.id}`,\r\n          state: { from: '/snippets' }\r\n        });\r\n      })\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const updateSnippet = (\r\n    snippet: NewSnippet,\r\n    id: number,\r\n    isLocal?: boolean\r\n  ): void => {\r\n    axios\r\n      .put<Response<Snippet>>(`/api/snippets/${id}`, snippet)\r\n      .then(res => {\r\n        const oldSnippetIdx = snippets.findIndex(s => s.id === id);\r\n        setSnippets([\r\n          ...snippets.slice(0, oldSnippetIdx),\r\n          res.data.data,\r\n          ...snippets.slice(oldSnippetIdx + 1)\r\n        ]);\r\n        setCurrentSnippet(res.data.data);\r\n\r\n        if (!isLocal) {\r\n          history.push({\r\n            pathname: `/snippet/${res.data.data.id}`,\r\n            state: { from: '/snippets' }\r\n          });\r\n        }\r\n      })\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const deleteSnippet = (id: number): void => {\r\n    if (window.confirm('Are you sure you want to delete this snippet?')) {\r\n      axios\r\n        .delete<Response<{}>>(`/api/snippets/${id}`)\r\n        .then(res => {\r\n          const deletedSnippetIdx = snippets.findIndex(s => s.id === id);\r\n          setSnippets([\r\n            ...snippets.slice(0, deletedSnippetIdx),\r\n            ...snippets.slice(deletedSnippetIdx + 1)\r\n          ]);\r\n          setSnippet(-1);\r\n          history.push('/snippets');\r\n        })\r\n        .catch(err => redirectOnError());\r\n    }\r\n  };\r\n\r\n  const toggleSnippetPin = (id: number): void => {\r\n    const snippet = snippets.find(s => s.id === id);\r\n\r\n    if (snippet) {\r\n      updateSnippet({ ...snippet, isPinned: !snippet.isPinned }, id, true);\r\n    }\r\n  };\r\n\r\n  const countTags = (): void => {\r\n    axios\r\n      .get<Response<TagCount[]>>('/api/snippets/statistics/count')\r\n      .then(res => setTagCount(res.data.data))\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const searchSnippets = (query: SearchQuery): void => {\r\n    axios\r\n      .post<Response<Snippet[]>>('/api/snippets/search', query)\r\n      .then(res => {\r\n        setSearchResults(res.data.data);\r\n        console.log(res.data.data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  const context = {\r\n    snippets,\r\n    searchResults,\r\n    currentSnippet,\r\n    tagCount,\r\n    getSnippets,\r\n    getSnippetById,\r\n    setSnippet,\r\n    createSnippet,\r\n    updateSnippet,\r\n    deleteSnippet,\r\n    toggleSnippetPin,\r\n    countTags,\r\n    searchSnippets\r\n  };\r\n\r\n  return (\r\n    <SnippetsContext.Provider value={context}>\r\n      {props.children}\r\n    </SnippetsContext.Provider>\r\n  );\r\n};\r\n","interface Props {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport const Layout = (props: Props): JSX.Element => {\r\n  return (\r\n    <div className='container-lg' style={{ paddingTop: '2rem', paddingBottom: '2rem' }}>\r\n      <div className='row g-4'>{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { Color } from '../../typescript/types';\r\n\r\ninterface Props {\r\n  text: string;\r\n  color: Color;\r\n  onClick?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const Badge = (props: Props): JSX.Element => {\r\n  const { text, color, onClick, className = '' } = props;\r\n\r\n  return (\r\n    <span \r\n      className={`badge bg-${color} ${className} ${onClick ? 'cursor-pointer' : ''}`}\r\n      onClick={onClick}\r\n      style={onClick ? { cursor: 'pointer' } : {}}\r\n    >\r\n      {text}\r\n    </span>\r\n  );\r\n};\r\n","import { ReactNode } from 'react';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  children?: ReactNode;\r\n  classes?: string;\r\n  bodyClasses?: string;\r\n}\r\n\r\nexport const Card = (props: Props): JSX.Element => {\r\n  const { title, children, classes = '', bodyClasses = '' } = props;\r\n\r\n  const parentClasses = `card mb-3 ${classes}`;\r\n  const childClasses = `card-body ${bodyClasses}`;\r\n\r\n  return (\r\n    <div className={parentClasses}>\r\n      <div className={childClasses}>\r\n        <h5 className='card-title'>{title}</h5>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\n\r\ninterface Props<T> {\r\n  title: string;\r\n  prevDest?: string;\r\n  prevState?: T;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport const PageHeader = <T,>(props: Props<T>): JSX.Element => {\r\n  const { title, prevDest, prevState, children } = props;\r\n\r\n  return (\r\n    <div className='col-12'>\r\n      <h4>{title}</h4>\r\n      {prevDest && (\r\n        <h6>\r\n          <Link\r\n            to={{\r\n              pathname: prevDest,\r\n              state: prevState\r\n            }}\r\n            className='text-decoration-none text-light'\r\n          >\r\n            &lt;- Go back\r\n          </Link>\r\n        </h6>\r\n      )}\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { Color } from '../../typescript/types';\r\n\r\ninterface Props {\r\n  text: string;\r\n  color: Color;\r\n  outline?: boolean;\r\n  small?: boolean;\r\n  handler?: () => void;\r\n  classes?: string;\r\n  type?: 'button' | 'submit' | 'reset';\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const Button = (props: Props): JSX.Element => {\r\n  const {\r\n    text,\r\n    color,\r\n    outline = false,\r\n    small = false,\r\n    handler,\r\n    classes = '',\r\n    type = 'button',\r\n    disabled = false\r\n  } = props;\r\n\r\n  const elClasses = [\r\n    'btn',\r\n    outline ? `btn-outline-${color}` : `btn-${color}`,\r\n    small && 'btn-sm',\r\n    classes\r\n  ];\r\n\r\n  return (\r\n    <button \r\n      type={type} \r\n      className={elClasses.join(' ')} \r\n      onClick={handler}\r\n      disabled={disabled}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\n\r\nexport const EmptyState = (): JSX.Element => {\r\n  const editorLink = (\r\n    <Link to='/editor' className='fw-bold text-success text-decoration-none'>\r\n      <span>editor</span>\r\n    </Link>\r\n  );\r\n\r\n  return (\r\n    <div className='col-12 d-flex flex-column align-items-center'>\r\n      <h4>You currently don't have any snippets</h4>\r\n      <p>Go to the {editorLink} and create one</p>\r\n    </div>\r\n  );\r\n};\r\n","import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\r\n\r\ninterface Return {\r\n  formatted: string;\r\n  relative: string;\r\n}\r\n\r\nexport const dateParser = (date: Date): Return => {\r\n  dayjs.extend(relativeTime);\r\n  dayjs.extend(customParseFormat);\r\n\r\n  // test date format\r\n  const regex = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.|\\+|-|Z)+/;\r\n  const dateFormat = regex.test(date.toString())\r\n    ? 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\r\n    : 'YYYY-MM-DD HH:mm:ss.SSS Z';\r\n\r\n  // parse date\r\n  const parsedDate = dayjs(date, dateFormat);\r\n  const formatted = parsedDate.format('YYYY-MM-DD HH:mm');\r\n  const relative = parsedDate.fromNow();\r\n\r\n  return { formatted, relative };\r\n};\r\n","import { Color } from '../typescript/types';\r\n\r\nexport const badgeColor = (language: string): Color => {\r\n  const code = language.toLowerCase().charCodeAt(0);\r\n  let color: Color = 'primary';\r\n\r\n  switch (code % 6) {\r\n    case 0:\r\n    default:\r\n      color = 'primary';\r\n      break;\r\n    case 1:\r\n      color = 'success';\r\n      break;\r\n    case 2:\r\n      color = 'info';\r\n      break;\r\n    case 3:\r\n      color = 'warning';\r\n      break;\r\n    case 4:\r\n      color = 'danger';\r\n      break;\r\n    case 5:\r\n      color = 'light';\r\n      break;\r\n  }\r\n\r\n  return color;\r\n};\r\n","import { aliases } from '../data/aliases_raw.json';\r\n\r\nexport const findLanguage = (language: string): boolean => {\r\n  const search = language.toLowerCase();\r\n  return aliases.some(alias => alias === search);\r\n};\r\n","import { SearchQuery } from '../typescript/interfaces';\r\n\r\nexport const searchParser = (rawQuery: string): SearchQuery => {\r\n  // Extract filters from query\r\n  const tags = extractFilters(rawQuery, 'tags');\r\n  const languages = extractFilters(rawQuery, 'lang');\r\n  const query = rawQuery.replaceAll(/(tags|lang):[a-zA-Z]+(,[a-zA-Z]+)*/g, '');\r\n\r\n  return {\r\n    query: query.trim(),\r\n    tags,\r\n    languages\r\n  };\r\n};\r\n\r\nconst extractFilters = (query: string, filter: string): string[] => {\r\n  let filters: string[] = [];\r\n\r\n  const regex = new RegExp(filter + ':[a-zA-Z]+(,[a-zA-Z]+)*');\r\n  const matcher = query.match(regex);\r\n\r\n  if (matcher) {\r\n    filters = matcher[0].split(':')[1].split(',');\r\n  }\r\n\r\n  return filters;\r\n};\r\n","import { useContext } from 'react';\r\nimport { SnippetsContext } from '../../store';\r\nimport Icon from '@mdi/react';\r\nimport { mdiPin, mdiPinOutline } from '@mdi/js';\r\n\r\ninterface Props {\r\n  id: number;\r\n  isPinned: boolean;\r\n}\r\n\r\nexport const SnippetPin = (props: Props): JSX.Element => {\r\n  const { toggleSnippetPin } = useContext(SnippetsContext);\r\n  const { id, isPinned } = props;\r\n\r\n  return (\r\n    <div onClick={() => toggleSnippetPin(id)} className='cursor-pointer'>\r\n      {isPinned ? (\r\n        <Icon path={mdiPin} size={0.8} color='#20c997' />\r\n      ) : (\r\n        <Icon path={mdiPinOutline} size={0.8} color='#ced4da' />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { Snippet } from '../../typescript/interfaces';\r\nimport { dateParser, badgeColor } from '../../utils';\r\nimport { Badge, Button, Card } from '../UI';\r\nimport { SnippetsContext } from '../../store';\r\nimport copy from 'clipboard-copy';\r\nimport { SnippetPin } from './SnippetPin';\r\n\r\ninterface Props {\r\n  snippet: Snippet;\r\n}\r\n\r\nexport const SnippetCard = (props: Props): JSX.Element => {\r\n  const { title, description, language, code, id, createdAt, isPinned } =\r\n    props.snippet;\r\n  const { setSnippet } = useContext(SnippetsContext);\r\n\r\n  const copyHandler = () => {\r\n    copy(code);\r\n  };\r\n\r\n  return (\r\n    <Card classes='h-100 snippet-card' bodyClasses='d-flex flex-column'>\r\n      {/* TITLE */}\r\n      <h5 className='card-title d-flex align-items-center justify-content-between'>\r\n        {title}\r\n        <SnippetPin id={id} isPinned={isPinned} />\r\n      </h5>\r\n\r\n      <h6 className='card-subtitle mb-2 text-muted'>\r\n        {/* LANGUAGE */}\r\n        <Badge text={language} color={badgeColor(language)} />\r\n      </h6>\r\n\r\n      {/* DESCRIPTION */}\r\n      <p>{description ? description : 'No description'}</p>\r\n\r\n      <div className='mt-auto'>\r\n        {/* UPDATE DATE */}\r\n        <p>Created {dateParser(createdAt).relative}</p>\r\n        <hr />\r\n\r\n        {/* ACTIONS */}\r\n        <div className='d-flex justify-content-end'>\r\n          <Link\r\n            to={{\r\n              pathname: `/snippet/${id}`,\r\n              state: { from: window.location.pathname }\r\n            }}\r\n          >\r\n            <Button\r\n              text='View'\r\n              color='secondary'\r\n              small\r\n              outline\r\n              classes='me-2'\r\n              handler={() => {\r\n                setSnippet(id);\r\n              }}\r\n            />\r\n          </Link>\r\n          <Button\r\n            text='Copy code'\r\n            color='secondary'\r\n            small\r\n            handler={copyHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n","import { Snippet } from '../../typescript/interfaces';\r\nimport { SnippetCard } from './SnippetCard';\r\n\r\ninterface Props {\r\n  snippets: Snippet[];\r\n}\r\n\r\nexport const SnippetGrid = (props: Props): JSX.Element => {\r\n  const { snippets } = props;\r\n\r\n  return (\r\n    <div className='row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4'>\r\n      {snippets.map(snippet => (\r\n        <div className='col' key={snippet.id}>\r\n          <SnippetCard snippet={snippet} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { useRef, useEffect, KeyboardEvent, useContext } from 'react';\r\nimport { SnippetsContext } from '../store';\r\nimport { searchParser } from '../utils';\r\n\r\nexport const SearchBar = (): JSX.Element => {\r\n  const { searchSnippets } = useContext(SnippetsContext);\r\n  const inputRef = useRef<HTMLInputElement>(document.createElement('input'));\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, [inputRef]);\r\n\r\n  const inputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    const query = searchParser(inputRef.current.value);\r\n\r\n    if (e.key === 'Enter') {\r\n      searchSnippets(query);\r\n    } else if (e.key === 'Escape') {\r\n      inputRef.current.value = '';\r\n      searchSnippets(searchParser(inputRef.current.value));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='mb-3'>\r\n      <input\r\n        type='text'\r\n        className='form-control'\r\n        placeholder='card lang:typescript tags:ui,react'\r\n        ref={inputRef}\r\n        onKeyUp={e => inputHandler(e)}\r\n      />\r\n      <div className='form-text text-gray ms-1'>\r\n        Search by pressing `Enter`. Clear with `Esc`.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useContext, Fragment } from 'react';\r\nimport { SnippetsContext } from '../store';\r\nimport { Layout, PageHeader, EmptyState } from '../components/UI';\r\nimport { SnippetGrid } from '../components/Snippets/SnippetGrid';\r\nimport { SearchBar } from '../components/SearchBar';\r\n\r\nexport const Home = (): JSX.Element => {\r\n  const { snippets, getSnippets, searchResults } = useContext(SnippetsContext);\r\n\r\n  useEffect(() => {\r\n    getSnippets();\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      {snippets.length === 0 ? (\r\n        <EmptyState />\r\n      ) : (\r\n        <Fragment>\r\n          <PageHeader title='Search' />\r\n          <SearchBar />\r\n          <div className='col-12 mb-4'>\r\n            <SnippetGrid snippets={searchResults} />\r\n          </div>\r\n\r\n          {snippets.some(s => s.isPinned) && (\r\n            <Fragment>\r\n              <PageHeader title='Pinned snippets' />\r\n              <div className='col-12 mt-3'>\r\n                <SnippetGrid snippets={snippets.filter(s => s.isPinned)} />\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { findLanguage } from '../../utils';\r\nimport hljs from 'highlight.js';\r\nimport 'highlight.js/styles/atom-one-dark.css';\r\n\r\ninterface Props {\r\n  code: string;\r\n  language: string;\r\n}\r\n\r\nexport const SnippetCode = (props: Props): JSX.Element => {\r\n  const { code, language } = props;\r\n\r\n  const syntax = findLanguage(language) ? language : 'plaintext';\r\n\r\n  useEffect(() => {\r\n    hljs.highlightAll();\r\n  }, []);\r\n\r\n  return (\r\n    <pre>\r\n      <code\r\n        className={`language-${syntax.toLowerCase()}`}\r\n        style={{ whiteSpace: 'pre-wrap', borderRadius: '4px' }}\r\n      >\r\n        {code}\r\n      </code>\r\n    </pre>\r\n  );\r\n};\r\n","import { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SnippetsContext } from '../../store';\r\nimport { Snippet } from '../../typescript/interfaces';\r\nimport { dateParser } from '../../utils';\r\nimport { Badge, Button, Card } from '../UI';\r\nimport copy from 'clipboard-copy';\r\nimport { SnippetPin } from './SnippetPin';\r\n\r\ninterface Props {\r\n  snippet: Snippet;\r\n}\r\n\r\nexport const SnippetDetails = (props: Props): JSX.Element => {\r\n  const {\r\n    title,\r\n    language,\r\n    tags,\r\n    createdAt,\r\n    updatedAt,\r\n    description,\r\n    code,\r\n    id,\r\n    isPinned\r\n  } = props.snippet;\r\n\r\n  const history = useHistory();\r\n\r\n  const { deleteSnippet, setSnippet } = useContext(SnippetsContext);\r\n\r\n  const creationDate = dateParser(createdAt);\r\n  const updateDate = dateParser(updatedAt);\r\n\r\n  // const copyHandler = () => {\r\n  //   copy(code);\r\n  // };\r\n\r\n  return (\r\n    <Card>\r\n      <h5 className='card-title d-flex align-items-center justify-content-between'>\r\n        {title}\r\n        <SnippetPin id={id} isPinned={isPinned} />\r\n      </h5>\r\n      <p>{description}</p>\r\n\r\n      {/* LANGUAGE */}\r\n      <div className={`d-flex justify-content-between`}>\r\n        <span>Language</span>\r\n        <span className='fw-bold'>{language}</span>\r\n      </div>\r\n\r\n      {/* CREATED AT */}\r\n      <div className={`d-flex justify-content-between`}>\r\n        <span>Created</span>\r\n        <span>{creationDate.relative}</span>\r\n      </div>\r\n\r\n      {/* UPDATED AT */}\r\n      <div className={`d-flex justify-content-between`}>\r\n        <span>Last updated</span>\r\n        <span>{updateDate.relative}</span>\r\n      </div>\r\n      <hr />\r\n\r\n      {/* TAGS */}\r\n      <div>\r\n        {tags.map((tag, idx) => (\r\n          <span className='me-2' key={idx}>\r\n            <Badge text={tag} color='light' />\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <hr />\r\n\r\n      {/* ACTIONS */}\r\n      <div className='d-grid g-2' style={{ rowGap: '10px' }}>\r\n        <Button\r\n          text='Delete'\r\n          color='danger'\r\n          small\r\n          outline\r\n          handler={() => deleteSnippet(id)}\r\n        />\r\n\r\n        <Button\r\n          text='Edit'\r\n          color='secondary'\r\n          small\r\n          outline\r\n          handler={() => {\r\n            setSnippet(id);\r\n            history.push({\r\n              pathname: `/editor/${id}`,\r\n              state: { from: window.location.pathname }\r\n            });\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          text='Copy raw url'\r\n          color='secondary'\r\n          small\r\n          outline\r\n          handler={() => {\r\n            const { protocol, host } = window.location;\r\n            const rawUrl = `${protocol}//${host}/api/snippets/raw/${id}`;\r\n            copy(rawUrl);\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          text='Copy code'\r\n          color='secondary'\r\n          small\r\n          handler={() => copy(code)}\r\n        />\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n","import ReactMarkdown from 'react-markdown';\r\n\r\ninterface Props {\r\n  markdown: string;\r\n}\r\n\r\nexport const SnippetDocs = (props: Props): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <ReactMarkdown>{props.markdown}</ReactMarkdown>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button } from '../UI';\r\n\r\ninterface AIExplainerProps {\r\n  code: string;\r\n  language: string;\r\n  aiExplanation?: string;\r\n}\r\n\r\ninterface AIResponse {\r\n  explanation: string;\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nconst AIExplainer: React.FC<AIExplainerProps> = ({ code, language, aiExplanation }) => {\r\n  const [explanation, setExplanation] = useState<string>(aiExplanation || '');\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const explainCode = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post<AIResponse>('/api/ai/explain', {\r\n        code,\r\n        language\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setExplanation(response.data.explanation);\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate explanation');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ai-explainer\">\r\n      <div className=\"d-flex align-items-center mb-2\">\r\n        <h6 className=\"mb-0\">🤖 AI Code Explanation</h6>\r\n        <Button\r\n          text={loading ? 'Analyzing...' : (explanation ? 'Refresh Explanation' : 'Explain Code')}\r\n          color=\"primary\"\r\n          outline={true}\r\n          small={true}\r\n          handler={explainCode}\r\n          classes=\"ms-2\"\r\n        />\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-warning alert-sm\">\r\n          <small>{error}</small>\r\n        </div>\r\n      )}\r\n\r\n      {explanation && (\r\n        <div className=\"ai-explanation p-3 bg-light rounded border\">\r\n          <small className=\"text-muted d-block mb-1\">AI Generated Explanation:</small>\r\n          <p className=\"mb-0\">{explanation}</p>\r\n        </div>\r\n      )}\r\n\r\n      {!explanation && !loading && (\r\n        <div className=\"text-muted\">\r\n          <small>Click \"Explain Code\" to get an AI-powered explanation of this code snippet.</small>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIExplainer;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Badge } from '../UI';\r\n\r\ninterface AutoTaggerProps {\r\n  code: string;\r\n  language: string;\r\n  currentTags: string[];\r\n  onTagsGenerated: (tags: string[]) => void;\r\n}\r\n\r\ninterface TagResponse {\r\n  tags: string[];\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nconst AutoTagger: React.FC<AutoTaggerProps> = ({ \r\n  code, \r\n  language, \r\n  currentTags, \r\n  onTagsGenerated \r\n}) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const generateTags = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post<TagResponse>('/api/ai/generate-tags', {\r\n        code,\r\n        language\r\n      });\r\n\r\n      if (response.data.success) {\r\n        const newTags = response.data.tags.filter(tag => \r\n          !currentTags.includes(tag.toLowerCase())\r\n        );\r\n        setSuggestedTags(newTags);\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate tags');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addTag = (tag: string) => {\r\n    const updatedTags = [...currentTags, tag];\r\n    onTagsGenerated(updatedTags);\r\n    setSuggestedTags(suggestedTags.filter(t => t !== tag));\r\n  };\r\n\r\n  const addAllTags = () => {\r\n    const updatedTags = [...currentTags, ...suggestedTags];\r\n    onTagsGenerated(updatedTags);\r\n    setSuggestedTags([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"auto-tagger\">\r\n      <div className=\"d-flex align-items-center mb-2\">\r\n        <label className=\"form-label mb-0\">🏷️ Smart Tags</label>\r\n        <Button\r\n          text={loading ? 'Generating...' : 'Generate AI Tags'}\r\n          color=\"success\"\r\n          small={true}\r\n          outline={true}\r\n          handler={generateTags}\r\n          classes=\"ms-2\"\r\n        />\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-warning alert-sm mb-2\">\r\n          <small>{error}</small>\r\n        </div>\r\n      )}\r\n\r\n      {suggestedTags.length > 0 && (\r\n        <div className=\"suggested-tags p-2 bg-light rounded border\">\r\n          <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n            <small className=\"text-muted\">AI Suggested Tags:</small>\r\n            <Button\r\n              text=\"Add All\"\r\n              color=\"success\"\r\n              small={true}\r\n              handler={addAllTags}\r\n            />\r\n          </div>\r\n          <div className=\"d-flex flex-wrap gap-1\">\r\n            {suggestedTags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"badge bg-primary cursor-pointer me-1 mb-1\"\r\n                onClick={() => addTag(tag)}\r\n                title={`Click to add \"${tag}\" to your tags`}\r\n                style={{ cursor: 'pointer' }}\r\n              >\r\n                {tag} <span className=\"ms-1\">+</span>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {currentTags.length > 0 && (\r\n        <div className=\"current-tags mt-2\">\r\n          <small className=\"text-muted d-block mb-1\">Current Tags:</small>\r\n          <div className=\"d-flex flex-wrap gap-1\">\r\n            {currentTags.map((tag, index) => (\r\n              <Badge key={index} text={tag} color=\"primary\" />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoTagger;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button } from '../UI';\r\n\r\ninterface OptimizationSuggestion {\r\n  type: 'performance' | 'readability' | 'security' | 'best-practice' | 'bug-fix';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  suggestion: string;\r\n  originalCode: string;\r\n  optimizedCode?: string;\r\n  lineNumber?: number;\r\n}\r\n\r\ninterface CodeOptimizationResult {\r\n  overallScore: number;\r\n  issues: OptimizationSuggestion[];\r\n  summary: string;\r\n  complexity: 'low' | 'medium' | 'high';\r\n  maintainability: 'poor' | 'fair' | 'good' | 'excellent';\r\n}\r\n\r\ninterface SecurityAnalysisResult {\r\n  securityIssues: OptimizationSuggestion[];\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n  issueCount: number;\r\n}\r\n\r\ninterface OptimizedCodeResult {\r\n  optimizedCode: string;\r\n  originalCode: string;\r\n  focusArea: string;\r\n}\r\n\r\ninterface CodeOptimizerProps {\r\n  code: string;\r\n  language: string;\r\n}\r\n\r\nconst CodeOptimizer: React.FC<CodeOptimizerProps> = ({ code, language }) => {\r\n  const [optimization, setOptimization] = useState<CodeOptimizationResult | null>(null);\r\n  const [securityAnalysis, setSecurityAnalysis] = useState<SecurityAnalysisResult | null>(null);\r\n  const [optimizedCode, setOptimizedCode] = useState<OptimizedCodeResult | null>(null);\r\n  const [loading, setLoading] = useState<string>('');\r\n  const [error, setError] = useState<string>('');\r\n  const [activeTab, setActiveTab] = useState<'analysis' | 'security' | 'optimized'>('analysis');\r\n\r\n  const analyzeCode = async () => {\r\n    setLoading('analysis');\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/ai/optimize', {\r\n        code,\r\n        language\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setOptimization(response.data);\r\n        setActiveTab('analysis');\r\n      } else {\r\n        setError(response.data.error || 'Failed to analyze code');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading('');\r\n    }\r\n  };\r\n\r\n  const scanSecurity = async () => {\r\n    setLoading('security');\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/ai/security-scan', {\r\n        code,\r\n        language\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setSecurityAnalysis(response.data);\r\n        setActiveTab('security');\r\n      } else {\r\n        setError(response.data.error || 'Failed to analyze security');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading('');\r\n    }\r\n  };\r\n\r\n  const generateOptimizedCode = async (focusArea?: string) => {\r\n    setLoading('optimized');\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/ai/optimize-code', {\r\n        code,\r\n        language,\r\n        focusArea\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setOptimizedCode(response.data);\r\n        setActiveTab('optimized');\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate optimized code');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading('');\r\n    }\r\n  };\r\n\r\n  const getSeverityBadge = (severity: string) => {\r\n    const colors = {\r\n      low: 'success',\r\n      medium: 'warning',\r\n      high: 'danger',\r\n      critical: 'danger'\r\n    };\r\n    return `badge bg-${colors[severity as keyof typeof colors] || 'secondary'}`;\r\n  };\r\n\r\n  const getTypeBadge = (type: string) => {\r\n    const colors = {\r\n      performance: 'primary',\r\n      readability: 'info',\r\n      security: 'danger',\r\n      'best-practice': 'warning',\r\n      'bug-fix': 'danger'\r\n    };\r\n    return `badge bg-${colors[type as keyof typeof colors] || 'secondary'}`;\r\n  };\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 80) return 'text-success';\r\n    if (score >= 60) return 'text-warning';\r\n    return 'text-danger';\r\n  };\r\n\r\n  const getMaintainabilityColor = (level: string) => {\r\n    const colors = {\r\n      excellent: 'text-success',\r\n      good: 'text-success',\r\n      fair: 'text-warning',\r\n      poor: 'text-danger'\r\n    };\r\n    return colors[level as keyof typeof colors] || 'text-muted';\r\n  };\r\n\r\n  return (\r\n    <div className=\"code-optimizer\">\r\n      <div className=\"d-flex align-items-center justify-content-between mb-3\">\r\n        <h6 className=\"mb-0\">🚀 AI Code Optimization</h6>\r\n        <div className=\"btn-group\" role=\"group\">\r\n          <Button\r\n            text={loading === 'analysis' ? 'Analyzing...' : 'Analyze Code'}\r\n            color=\"primary\"\r\n            outline={true}\r\n            small={true}\r\n            handler={analyzeCode}\r\n            disabled={loading !== ''}\r\n          />\r\n          <Button\r\n            text={loading === 'security' ? 'Scanning...' : 'Security Scan'}\r\n            color=\"danger\"\r\n            outline={true}\r\n            small={true}\r\n            handler={scanSecurity}\r\n            disabled={loading !== ''}\r\n          />\r\n          <Button\r\n            text={loading === 'optimized' ? 'Optimizing...' : 'Optimize'}\r\n            color=\"success\"\r\n            outline={true}\r\n            small={true}\r\n            handler={() => generateOptimizedCode()}\r\n            disabled={loading !== ''}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-warning alert-sm mb-3\">\r\n          <small>{error}</small>\r\n        </div>\r\n      )}\r\n\r\n      {/* Navigation Tabs */}\r\n      {(optimization || securityAnalysis || optimizedCode) && (\r\n        <ul className=\"nav nav-tabs mb-3\">\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className={`nav-link ${activeTab === 'analysis' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('analysis')}\r\n              disabled={!optimization}\r\n            >\r\n              Analysis {optimization && (\r\n                <span className={`badge bg-secondary ms-1`}>\r\n                  {optimization.issues.length}\r\n                </span>\r\n              )}\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className={`nav-link ${activeTab === 'security' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('security')}\r\n              disabled={!securityAnalysis}\r\n            >\r\n              Security {securityAnalysis && (\r\n                <span className={`badge bg-${securityAnalysis.riskLevel === 'high' ? 'danger' : securityAnalysis.riskLevel === 'medium' ? 'warning' : 'success'} ms-1`}>\r\n                  {securityAnalysis.issueCount}\r\n                </span>\r\n              )}\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className={`nav-link ${activeTab === 'optimized' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('optimized')}\r\n              disabled={!optimizedCode}\r\n            >\r\n              Optimized Code\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      )}\r\n\r\n      {/* Analysis Tab */}\r\n      {activeTab === 'analysis' && optimization && (\r\n        <div className=\"optimization-analysis\">\r\n          <div className=\"row mb-3\">\r\n            <div className=\"col-md-3\">\r\n              <div className=\"text-center\">\r\n                <div className={`h4 mb-1 ${getScoreColor(optimization.overallScore)}`}>\r\n                  {optimization.overallScore}/100\r\n                </div>\r\n                <small className=\"text-muted\">Overall Score</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <div className=\"text-center\">\r\n                <div className=\"h6 mb-1 text-capitalize\">\r\n                  {optimization.complexity}\r\n                </div>\r\n                <small className=\"text-muted\">Complexity</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <div className=\"text-center\">\r\n                <div className={`h6 mb-1 text-capitalize ${getMaintainabilityColor(optimization.maintainability)}`}>\r\n                  {optimization.maintainability}\r\n                </div>\r\n                <small className=\"text-muted\">Maintainability</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <div className=\"text-center\">\r\n                <div className=\"h6 mb-1\">\r\n                  {optimization.issues.length}\r\n                </div>\r\n                <small className=\"text-muted\">Issues Found</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mb-3\">\r\n            <h6>Summary</h6>\r\n            <p className=\"text-muted mb-0\">{optimization.summary}</p>\r\n          </div>\r\n\r\n          {optimization.issues.length > 0 && (\r\n            <div>\r\n              <h6>Issues & Suggestions</h6>\r\n              {optimization.issues.map((issue, index) => (\r\n                <div key={index} className=\"card mb-2\">\r\n                  <div className=\"card-body\">\r\n                    <div className=\"d-flex justify-content-between align-items-start mb-2\">\r\n                      <h6 className=\"card-title mb-0\">{issue.title}</h6>\r\n                      <div>\r\n                        <span className={getTypeBadge(issue.type)}>{issue.type}</span>\r\n                        <span className={`${getSeverityBadge(issue.severity)} ms-1`}>{issue.severity}</span>\r\n                      </div>\r\n                    </div>\r\n                    <p className=\"card-text text-muted mb-2\">{issue.description}</p>\r\n                    <div className=\"mb-2\">\r\n                      <strong>Suggestion:</strong> {issue.suggestion}\r\n                    </div>\r\n                    {issue.originalCode && (\r\n                      <div className=\"mb-2\">\r\n                        <small className=\"text-muted\">Problematic code:</small>\r\n                        <pre className=\"bg-light p-2 rounded\"><code>{issue.originalCode}</code></pre>\r\n                      </div>\r\n                    )}\r\n                    {issue.optimizedCode && (\r\n                      <div>\r\n                        <small className=\"text-success\">Improved code:</small>\r\n                        <pre className=\"bg-light p-2 rounded border-start border-success border-3\"><code>{issue.optimizedCode}</code></pre>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Security Tab */}\r\n      {activeTab === 'security' && securityAnalysis && (\r\n        <div className=\"security-analysis\">\r\n          <div className=\"row mb-3\">\r\n            <div className=\"col-md-4\">\r\n              <div className=\"text-center\">\r\n                <div className={`h4 mb-1 ${securityAnalysis.riskLevel === 'high' ? 'text-danger' : securityAnalysis.riskLevel === 'medium' ? 'text-warning' : 'text-success'}`}>\r\n                  {securityAnalysis.riskLevel.toUpperCase()}\r\n                </div>\r\n                <small className=\"text-muted\">Risk Level</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"h4 mb-1\">\r\n                  {securityAnalysis.issueCount}\r\n                </div>\r\n                <small className=\"text-muted\">Security Issues</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <div className=\"text-center\">\r\n                <div className={`h4 mb-1 ${securityAnalysis.issueCount === 0 ? 'text-success' : 'text-warning'}`}>\r\n                  {securityAnalysis.issueCount === 0 ? '✓' : '⚠'}\r\n                </div>\r\n                <small className=\"text-muted\">Security Status</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {securityAnalysis.securityIssues.length > 0 ? (\r\n            <div>\r\n              <h6>Security Vulnerabilities</h6>\r\n              {securityAnalysis.securityIssues.map((issue, index) => (\r\n                <div key={index} className=\"card mb-2 border-danger\">\r\n                  <div className=\"card-body\">\r\n                    <div className=\"d-flex justify-content-between align-items-start mb-2\">\r\n                      <h6 className=\"card-title mb-0 text-danger\">\r\n                        🔒 {issue.title}\r\n                      </h6>\r\n                      <span className={getSeverityBadge(issue.severity)}>{issue.severity}</span>\r\n                    </div>\r\n                    <p className=\"card-text text-muted mb-2\">{issue.description}</p>\r\n                    <div className=\"mb-2\">\r\n                      <strong className=\"text-danger\">Security Fix:</strong> {issue.suggestion}\r\n                    </div>\r\n                    {issue.originalCode && (\r\n                      <div className=\"mb-2\">\r\n                        <small className=\"text-danger\">Vulnerable code:</small>\r\n                        <pre className=\"bg-light p-2 rounded border-start border-danger border-3\"><code>{issue.originalCode}</code></pre>\r\n                      </div>\r\n                    )}\r\n                    {issue.optimizedCode && (\r\n                      <div>\r\n                        <small className=\"text-success\">Secure code:</small>\r\n                        <pre className=\"bg-light p-2 rounded border-start border-success border-3\"><code>{issue.optimizedCode}</code></pre>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"alert alert-success\">\r\n              <h6 className=\"alert-heading\">🛡️ No Security Issues Found</h6>\r\n              <p className=\"mb-0\">The code appears to follow security best practices. However, always consider additional security measures in production environments.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Optimized Code Tab */}\r\n      {activeTab === 'optimized' && optimizedCode && (\r\n        <div className=\"optimized-code\">\r\n          <div className=\"mb-3\">\r\n            <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n              <h6>Optimized Code</h6>\r\n              <div className=\"btn-group\" role=\"group\">\r\n                <Button\r\n                  text=\"Performance\"\r\n                  color=\"primary\"\r\n                  outline={true}\r\n                  small={true}\r\n                  handler={() => generateOptimizedCode('performance')}\r\n                  disabled={loading !== ''}\r\n                />\r\n                <Button\r\n                  text=\"Readability\"\r\n                  color=\"info\"\r\n                  outline={true}\r\n                  small={true}\r\n                  handler={() => generateOptimizedCode('readability')}\r\n                  disabled={loading !== ''}\r\n                />\r\n                <Button\r\n                  text=\"Security\"\r\n                  color=\"danger\"\r\n                  outline={true}\r\n                  small={true}\r\n                  handler={() => generateOptimizedCode('security')}\r\n                  disabled={loading !== ''}\r\n                />\r\n              </div>\r\n            </div>\r\n            <small className=\"text-muted\">Focus Area: {optimizedCode.focusArea}</small>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <h6 className=\"text-muted\">Original Code</h6>\r\n              <pre className=\"bg-light p-3 rounded border\" style={{ maxHeight: '400px', overflow: 'auto' }}>\r\n                <code>{optimizedCode.originalCode}</code>\r\n              </pre>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <h6 className=\"text-success\">Optimized Code</h6>\r\n              <pre className=\"bg-light p-3 rounded border border-success\" style={{ maxHeight: '400px', overflow: 'auto' }}>\r\n                <code>{optimizedCode.optimizedCode}</code>\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {!optimization && !securityAnalysis && !optimizedCode && !loading && (\r\n        <div className=\"text-center text-muted py-4\">\r\n          <p>Select an optimization option above to analyze your code</p>\r\n          <ul className=\"list-unstyled\">\r\n            <li><strong>Analyze Code:</strong> Get comprehensive optimization suggestions</li>\r\n            <li><strong>Security Scan:</strong> Identify potential security vulnerabilities</li>\r\n            <li><strong>Optimize:</strong> Generate an improved version of your code</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeOptimizer;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button } from '../UI';\r\n\r\ninterface CodeConversionResult {\r\n  convertedCode: string;\r\n  sourceLanguage: string;\r\n  targetLanguage: string;\r\n  conversionNotes: string[];\r\n  confidence: 'high' | 'medium' | 'low';\r\n  warnings: string[];\r\n  equivalentLibraries?: { [key: string]: string };\r\n}\r\n\r\ninterface LanguageFeatureComparison {\r\n  feature: string;\r\n  sourceImplementation: string;\r\n  targetImplementation: string;\r\n  notes: string;\r\n}\r\n\r\ninterface ConversionStrategies {\r\n  [language: string]: string;\r\n}\r\n\r\ninterface CodeConverterProps {\r\n  code: string;\r\n  language: string;\r\n}\r\n\r\nconst POPULAR_LANGUAGES = [\r\n  'javascript', 'python', 'java', 'typescript', 'csharp', 'cpp', 'c', 'go', \r\n  'rust', 'php', 'ruby', 'swift', 'kotlin', 'scala', 'dart', 'r', 'sql'\r\n];\r\n\r\nconst CodeConverter: React.FC<CodeConverterProps> = ({ code, language }) => {\r\n  const [conversion, setConversion] = useState<CodeConversionResult | null>(null);\r\n  const [comparison, setComparison] = useState<LanguageFeatureComparison[]>([]);\r\n  const [strategies, setStrategies] = useState<ConversionStrategies>({});\r\n  const [selectedTargetLanguage, setSelectedTargetLanguage] = useState<string>('');\r\n  const [loading, setLoading] = useState<string>('');\r\n  const [error, setError] = useState<string>('');\r\n  const [activeTab, setActiveTab] = useState<'convert' | 'compare' | 'strategies'>('convert');\r\n\r\n  const convertCode = async () => {\r\n    if (!selectedTargetLanguage) {\r\n      setError('Please select a target language');\r\n      return;\r\n    }\r\n\r\n    setLoading('convert');\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/ai/convert-code', {\r\n        code,\r\n        sourceLanguage: language,\r\n        targetLanguage: selectedTargetLanguage\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setConversion(response.data);\r\n        setActiveTab('convert');\r\n      } else {\r\n        setError(response.data.error || 'Failed to convert code');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading('');\r\n    }\r\n  };\r\n\r\n  const compareLanguages = async () => {\r\n    if (!selectedTargetLanguage) {\r\n      setError('Please select a target language');\r\n      return;\r\n    }\r\n\r\n    setLoading('compare');\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/ai/compare-languages', {\r\n        sourceLanguage: language,\r\n        targetLanguage: selectedTargetLanguage\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setComparison(response.data.comparison);\r\n        setActiveTab('compare');\r\n      } else {\r\n        setError(response.data.error || 'Failed to compare languages');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading('');\r\n    }\r\n  };\r\n\r\n  const getConversionStrategies = async () => {\r\n    setLoading('strategies');\r\n    setError('');\r\n\r\n    const targetLanguages = POPULAR_LANGUAGES.filter(lang => \r\n      lang !== language.toLowerCase()\r\n    ).slice(0, 5);\r\n\r\n    try {\r\n      const response = await axios.post('/api/ai/conversion-strategies', {\r\n        code,\r\n        sourceLanguage: language,\r\n        targetLanguages\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setStrategies(response.data.strategies);\r\n        setActiveTab('strategies');\r\n      } else {\r\n        setError(response.data.error || 'Failed to get conversion strategies');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading('');\r\n    }\r\n  };\r\n\r\n  const getConfidenceBadge = (confidence: string) => {\r\n    const colors = {\r\n      high: 'success',\r\n      medium: 'warning',\r\n      low: 'danger'\r\n    };\r\n    return `badge bg-${colors[confidence as keyof typeof colors] || 'secondary'}`;\r\n  };\r\n\r\n  const getLanguageDisplayName = (lang: string) => {\r\n    const displayNames: { [key: string]: string } = {\r\n      'javascript': 'JavaScript',\r\n      'typescript': 'TypeScript',\r\n      'python': 'Python',\r\n      'java': 'Java',\r\n      'csharp': 'C#',\r\n      'cpp': 'C++',\r\n      'c': 'C',\r\n      'go': 'Go',\r\n      'rust': 'Rust',\r\n      'php': 'PHP',\r\n      'ruby': 'Ruby',\r\n      'swift': 'Swift',\r\n      'kotlin': 'Kotlin',\r\n      'scala': 'Scala',\r\n      'dart': 'Dart',\r\n      'r': 'R',\r\n      'sql': 'SQL'\r\n    };\r\n    return displayNames[lang.toLowerCase()] || lang.charAt(0).toUpperCase() + lang.slice(1);\r\n  };\r\n\r\n  const availableLanguages = POPULAR_LANGUAGES.filter(lang => \r\n    lang.toLowerCase() !== language.toLowerCase()\r\n  );\r\n\r\n  return (\r\n    <div className=\"code-converter\">\r\n      <div className=\"d-flex align-items-center justify-content-between mb-3\">\r\n        <h6 className=\"mb-0\">🔄 AI Code Converter</h6>\r\n        <div className=\"d-flex align-items-center\">\r\n          <select \r\n            className=\"form-select form-select-sm me-2\" \r\n            style={{ width: 'auto', minWidth: '150px' }}\r\n            value={selectedTargetLanguage}\r\n            onChange={(e) => setSelectedTargetLanguage(e.target.value)}\r\n          >\r\n            <option value=\"\">Select target language</option>\r\n            {availableLanguages.map(lang => (\r\n              <option key={lang} value={lang}>\r\n                {getLanguageDisplayName(lang)}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <div className=\"btn-group\" role=\"group\">\r\n            <Button\r\n              text={loading === 'convert' ? 'Converting...' : 'Convert'}\r\n              color=\"primary\"\r\n              outline={true}\r\n              small={true}\r\n              handler={convertCode}\r\n              disabled={loading !== '' || !selectedTargetLanguage}\r\n            />\r\n            <Button\r\n              text={loading === 'compare' ? 'Comparing...' : 'Compare'}\r\n              color=\"info\"\r\n              outline={true}\r\n              small={true}\r\n              handler={compareLanguages}\r\n              disabled={loading !== '' || !selectedTargetLanguage}\r\n            />\r\n            <Button\r\n              text={loading === 'strategies' ? 'Analyzing...' : 'Strategies'}\r\n              color=\"warning\"\r\n              outline={true}\r\n              small={true}\r\n              handler={getConversionStrategies}\r\n              disabled={loading !== ''}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-warning alert-sm mb-3\">\r\n          <small>{error}</small>\r\n        </div>\r\n      )}\r\n\r\n      {/* Navigation Tabs */}\r\n      {(conversion || comparison.length > 0 || Object.keys(strategies).length > 0) && (\r\n        <ul className=\"nav nav-tabs mb-3\">\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className={`nav-link ${activeTab === 'convert' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('convert')}\r\n              disabled={!conversion}\r\n            >\r\n              Converted Code\r\n              {conversion && (\r\n                <span className={`badge ms-1 ${getConfidenceBadge(conversion.confidence)}`}>\r\n                  {conversion.confidence}\r\n                </span>\r\n              )}\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className={`nav-link ${activeTab === 'compare' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('compare')}\r\n              disabled={comparison.length === 0}\r\n            >\r\n              Language Comparison\r\n              {comparison.length > 0 && (\r\n                <span className=\"badge bg-secondary ms-1\">\r\n                  {comparison.length}\r\n                </span>\r\n              )}\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className={`nav-link ${activeTab === 'strategies' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('strategies')}\r\n              disabled={Object.keys(strategies).length === 0}\r\n            >\r\n              Conversion Strategies\r\n              {Object.keys(strategies).length > 0 && (\r\n                <span className=\"badge bg-secondary ms-1\">\r\n                  {Object.keys(strategies).length}\r\n                </span>\r\n              )}\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      )}\r\n\r\n      {/* Convert Tab */}\r\n      {activeTab === 'convert' && conversion && (\r\n        <div className=\"conversion-result\">\r\n          <div className=\"row mb-3\">\r\n            <div className=\"col-md-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"h6 mb-1\">\r\n                  {getLanguageDisplayName(conversion.sourceLanguage)}\r\n                </div>\r\n                <small className=\"text-muted\">Source</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"h4 mb-1\">→</div>\r\n                <small className=\"text-muted\">Converted to</small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"h6 mb-1\">\r\n                  {getLanguageDisplayName(conversion.targetLanguage)}\r\n                </div>\r\n                <small className=\"text-muted\">Target</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row mb-3\">\r\n            <div className=\"col-md-6\">\r\n              <h6 className=\"text-muted\">Original Code ({getLanguageDisplayName(conversion.sourceLanguage)})</h6>\r\n              <pre className=\"bg-light p-3 rounded border\" style={{ maxHeight: '400px', overflow: 'auto' }}>\r\n                <code>{code}</code>\r\n              </pre>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                <h6 className=\"text-success mb-0\">\r\n                  Converted Code ({getLanguageDisplayName(conversion.targetLanguage)})\r\n                </h6>\r\n                <span className={getConfidenceBadge(conversion.confidence)}>\r\n                  {conversion.confidence} confidence\r\n                </span>\r\n              </div>\r\n              <pre className=\"bg-light p-3 rounded border border-success\" style={{ maxHeight: '400px', overflow: 'auto' }}>\r\n                <code>{conversion.convertedCode}</code>\r\n              </pre>\r\n            </div>\r\n          </div>\r\n\r\n          {conversion.conversionNotes.length > 0 && (\r\n            <div className=\"mb-3\">\r\n              <h6>Conversion Notes</h6>\r\n              <ul className=\"list-group\">\r\n                {conversion.conversionNotes.map((note, index) => (\r\n                  <li key={index} className=\"list-group-item\">\r\n                    <i className=\"text-info\">ℹ️</i> {note}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          {conversion.warnings.length > 0 && (\r\n            <div className=\"mb-3\">\r\n              <h6 className=\"text-warning\">Warnings</h6>\r\n              <ul className=\"list-group\">\r\n                {conversion.warnings.map((warning, index) => (\r\n                  <li key={index} className=\"list-group-item list-group-item-warning\">\r\n                    <i className=\"text-warning\">⚠️</i> {warning}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          {conversion.equivalentLibraries && Object.keys(conversion.equivalentLibraries).length > 0 && (\r\n            <div className=\"mb-3\">\r\n              <h6>Library Equivalents</h6>\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-sm\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{getLanguageDisplayName(conversion.sourceLanguage)}</th>\r\n                      <th>{getLanguageDisplayName(conversion.targetLanguage)}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {Object.entries(conversion.equivalentLibraries).map(([sourceLib, targetLib]) => (\r\n                      <tr key={sourceLib}>\r\n                        <td><code>{sourceLib}</code></td>\r\n                        <td><code>{targetLib}</code></td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Compare Tab */}\r\n      {activeTab === 'compare' && comparison.length > 0 && (\r\n        <div className=\"language-comparison\">\r\n          <div className=\"mb-3\">\r\n            <h6>\r\n              Language Feature Comparison: {getLanguageDisplayName(language)} vs {getLanguageDisplayName(selectedTargetLanguage)}\r\n            </h6>\r\n          </div>\r\n\r\n          {comparison.map((feature, index) => (\r\n            <div key={index} className=\"card mb-3\">\r\n              <div className=\"card-header\">\r\n                <h6 className=\"mb-0\">{feature.feature}</h6>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <h6 className=\"text-primary\">{getLanguageDisplayName(language)}</h6>\r\n                    <p className=\"text-muted\">{feature.sourceImplementation}</p>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <h6 className=\"text-success\">{getLanguageDisplayName(selectedTargetLanguage)}</h6>\r\n                    <p className=\"text-muted\">{feature.targetImplementation}</p>\r\n                  </div>\r\n                </div>\r\n                {feature.notes && (\r\n                  <div className=\"border-top pt-2\">\r\n                    <small><strong>Notes:</strong> {feature.notes}</small>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Strategies Tab */}\r\n      {activeTab === 'strategies' && Object.keys(strategies).length > 0 && (\r\n        <div className=\"conversion-strategies\">\r\n          <div className=\"mb-3\">\r\n            <h6>Conversion Strategies from {getLanguageDisplayName(language)}</h6>\r\n            <p className=\"text-muted\">AI-recommended approaches for converting this code to different languages</p>\r\n          </div>\r\n\r\n          {Object.entries(strategies).map(([targetLang, strategy]) => (\r\n            <div key={targetLang} className=\"card mb-3\">\r\n              <div className=\"card-header\">\r\n                <h6 className=\"mb-0\">\r\n                  {getLanguageDisplayName(language)} → {getLanguageDisplayName(targetLang)}\r\n                </h6>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <p className=\"mb-0\">{strategy}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {!conversion && comparison.length === 0 && Object.keys(strategies).length === 0 && !loading && (\r\n        <div className=\"text-center text-muted py-4\">\r\n          <p>Select a target language and choose a conversion option</p>\r\n          <ul className=\"list-unstyled\">\r\n            <li><strong>Convert:</strong> Get the code converted to another language</li>\r\n            <li><strong>Compare:</strong> See feature differences between languages</li>\r\n            <li><strong>Strategies:</strong> Get conversion recommendations for multiple languages</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeConverter;\r\n","import { Fragment, useContext, useEffect, useState } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport { SnippetCode } from '../components/Snippets/SnippetCode';\r\nimport { Layout, PageHeader, Card } from '../components/UI';\r\nimport { SnippetsContext } from '../store';\r\nimport { SnippetDetails } from '../components/Snippets/SnippetDetails';\r\nimport { SnippetDocs } from '../components/Snippets/SnippetDocs';\r\nimport { AIExplainer, CodeOptimizer, CodeConverter } from '../components/AI';\r\n\r\ninterface Params {\r\n  id: string;\r\n}\r\n\r\nexport const Snippet = (): JSX.Element => {\r\n  const { currentSnippet, getSnippetById } = useContext(SnippetsContext);\r\n  const { id } = useParams<Params>();\r\n  const [activeAITab, setActiveAITab] = useState<'explain' | 'optimize' | 'convert'>('explain');\r\n\r\n  // Get previous location\r\n  const location = useLocation<{ from: string }>();\r\n  const { from } = location.state || '/snippets';\r\n\r\n  useEffect(() => {\r\n    getSnippetById(+id);\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      {!currentSnippet ? (\r\n        <div className='col-12'>Loading...</div>\r\n      ) : (\r\n        <Fragment>\r\n          <PageHeader title='' prevDest={from} />\r\n          <div className='col-12 col-md-7 col-lg-8 mt-3'>\r\n            <SnippetCode\r\n              code={currentSnippet.code}\r\n              language={currentSnippet.language}\r\n            />\r\n          </div>\r\n          <div className='col-12 col-md-5 col-lg-4 mt-md-3'>\r\n            <SnippetDetails snippet={currentSnippet} />\r\n          </div>\r\n          \r\n          {/* AI Features Section */}\r\n          <div className='col-12 mt-3'>\r\n            <Card title='🤖 AI-Powered Analysis'>\r\n              <div className=\"mb-3\">\r\n                <div className=\"btn-group\" role=\"group\">\r\n                  <button\r\n                    className={`btn btn-outline-primary ${activeAITab === 'explain' ? 'active' : ''}`}\r\n                    onClick={() => setActiveAITab('explain')}\r\n                  >\r\n                    📝 Code Explanation\r\n                  </button>\r\n                  <button\r\n                    className={`btn btn-outline-success ${activeAITab === 'optimize' ? 'active' : ''}`}\r\n                    onClick={() => setActiveAITab('optimize')}\r\n                  >\r\n                    🚀 Code Optimization\r\n                  </button>\r\n                  <button\r\n                    className={`btn btn-outline-info ${activeAITab === 'convert' ? 'active' : ''}`}\r\n                    onClick={() => setActiveAITab('convert')}\r\n                  >\r\n                    🔄 Language Conversion\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              \r\n              {activeAITab === 'explain' && (\r\n                <AIExplainer\r\n                  code={currentSnippet.code}\r\n                  language={currentSnippet.language}\r\n                  aiExplanation={currentSnippet.aiExplanation}\r\n                />\r\n              )}\r\n              \r\n              {activeAITab === 'optimize' && (\r\n                <CodeOptimizer\r\n                  code={currentSnippet.code}\r\n                  language={currentSnippet.language}\r\n                />\r\n              )}\r\n              \r\n              {activeAITab === 'convert' && (\r\n                <CodeConverter\r\n                  code={currentSnippet.code}\r\n                  language={currentSnippet.language}\r\n                />\r\n              )}\r\n            </Card>\r\n          </div>\r\n\r\n          {currentSnippet.docs && (\r\n            <div className='col-12'>\r\n              <Card title='Snippet documentation'>\r\n                <hr />\r\n                <SnippetDocs markdown={currentSnippet.docs} />\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import { useEffect, useContext, useState, Fragment } from 'react';\r\nimport { SnippetsContext } from '../store';\r\nimport { SnippetGrid } from '../components/Snippets/SnippetGrid';\r\nimport { Button, Card, EmptyState, Layout } from '../components/UI';\r\nimport { Snippet } from '../typescript/interfaces';\r\n\r\nexport const Snippets = (): JSX.Element => {\r\n  const { snippets, tagCount, getSnippets, countTags } =\r\n    useContext(SnippetsContext);\r\n\r\n  const [filter, setFilter] = useState<string | null>(null);\r\n  const [localSnippets, setLocalSnippets] = useState<Snippet[]>([]);\r\n\r\n  useEffect(() => {\r\n    getSnippets();\r\n    countTags();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLocalSnippets([...snippets]);\r\n  }, [snippets]);\r\n\r\n  const filterHandler = (tag: string) => {\r\n    setFilter(tag);\r\n    const filteredSnippets = snippets.filter(s => s.tags.includes(tag));\r\n    setLocalSnippets(filteredSnippets);\r\n  };\r\n\r\n  const clearFilterHandler = () => {\r\n    setFilter(null);\r\n    setLocalSnippets([...snippets]);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {snippets.length === 0 ? (\r\n        <EmptyState />\r\n      ) : (\r\n        <Fragment>\r\n          <div className='col-12 col-md-4 col-lg-3'>\r\n            <Card>\r\n              <h5 className='card-title fw-bold text-primary'>All snippets</h5>\r\n              <div className='mb-3 d-flex justify-content-between align-items-center'>\r\n                <span className='fw-medium'>Total</span>\r\n                <span className='fw-medium'>{snippets.length}</span>\r\n              </div>\r\n              <hr />\r\n\r\n              <h5 className='card-title fw-bold text-primary mb-3'>Filter by tags</h5>\r\n              <div className='tag-filter-list'>\r\n                {tagCount.map((tag, idx) => {\r\n                  const isActiveFilter = filter === tag.name;\r\n\r\n                  return (\r\n                    <div\r\n                      key={idx}\r\n                      className={`d-flex justify-content-between cursor-pointer p-2 rounded mb-2 transition-all ${\r\n                        isActiveFilter \r\n                          ? 'bg-primary text-white' \r\n                          : 'hover-bg-light'\r\n                      }`}\r\n                      onClick={() => filterHandler(tag.name)}\r\n                      style={{ \r\n                        transition: 'all 0.3s ease',\r\n                        backgroundColor: isActiveFilter ? '#0d6efd' : 'transparent'\r\n                      }}\r\n                      onMouseEnter={(e) => {\r\n                        if (!isActiveFilter) {\r\n                          e.currentTarget.style.backgroundColor = '#f8f9fa';\r\n                        }\r\n                      }}\r\n                      onMouseLeave={(e) => {\r\n                        if (!isActiveFilter) {\r\n                          e.currentTarget.style.backgroundColor = 'transparent';\r\n                        }\r\n                      }}\r\n                    >\r\n                      <span className='fw-medium'>{tag.name}</span>\r\n                      <span className='fw-medium'>{tag.count}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <div className='d-grid mt-3'>\r\n                <Button\r\n                  text='Clear filters'\r\n                  color='secondary'\r\n                  small\r\n                  outline\r\n                  handler={clearFilterHandler}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n          <div className='col-12 col-md-8 col-lg-9'>\r\n            <SnippetGrid snippets={localSnippets} />\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import {\r\n  ChangeEvent,\r\n  FormEvent,\r\n  Fragment,\r\n  useState,\r\n  useContext,\r\n  useEffect\r\n} from 'react';\r\nimport { SnippetsContext } from '../../store';\r\nimport { NewSnippet } from '../../typescript/interfaces';\r\nimport { Button, Card } from '../UI';\r\nimport AutoTagger from '../AI/AutoTagger';\r\nimport AIExplainer from '../AI/AIExplainer';\r\n\r\ninterface Props {\r\n  inEdit?: boolean;\r\n}\r\n\r\nexport const SnippetForm = (props: Props): JSX.Element => {\r\n  const { inEdit = false } = props;\r\n  const { createSnippet, currentSnippet, updateSnippet } =\r\n    useContext(SnippetsContext);\r\n\r\n  const [formData, setFormData] = useState<NewSnippet>({\r\n    title: '',\r\n    description: '',\r\n    language: '',\r\n    code: '',\r\n    docs: '',\r\n    isPinned: false,\r\n    tags: []\r\n  });\r\n\r\n  const [useAI, setUseAI] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (inEdit) {\r\n      if (currentSnippet) {\r\n        setFormData({ ...currentSnippet });\r\n      }\r\n    }\r\n  }, [currentSnippet]);\r\n\r\n  const inputHandler = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const stringToTags = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const tags = e.target.value.split(',');\r\n    setFormData({\r\n      ...formData,\r\n      tags\r\n    });\r\n  };\r\n\r\n  const tagsToString = (): string => {\r\n    return formData.tags.join(',');\r\n  };\r\n\r\n  const formHandler = (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const submissionData = {\r\n      ...formData,\r\n      useAI\r\n    };\r\n\r\n    if (inEdit) {\r\n      if (currentSnippet) {\r\n        updateSnippet(submissionData, currentSnippet.id);\r\n      }\r\n    } else {\r\n      createSnippet(submissionData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='col-12 mt-3'>\r\n        <Card>\r\n          <form onSubmit={e => formHandler(e)}>\r\n            {/* DETAILS SECTION */}\r\n            <h5 className='card-title mb-3'>Snippet details</h5>\r\n\r\n            {/* TITLE */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='title' className='form-label'>\r\n                Title\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='title'\r\n                name='title'\r\n                value={formData.title}\r\n                placeholder='Recursively copy all files'\r\n                required\r\n                onChange={e => inputHandler(e)}\r\n              />\r\n            </div>\r\n\r\n            {/* DESCRIPTION */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='description' className='form-label'>\r\n                Short description\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='description'\r\n                name='description'\r\n                value={formData.description}\r\n                placeholder='Bash script to copy all files from src to dest'\r\n                onChange={e => inputHandler(e)}\r\n              />\r\n            </div>\r\n\r\n            {/* LANGUAGE */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='language' className='form-label'>\r\n                Language\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='language'\r\n                name='language'\r\n                value={formData.language}\r\n                placeholder='python'\r\n                required\r\n                onChange={e => inputHandler(e)}\r\n              />\r\n            </div>\r\n\r\n            {/* TAGS */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='tags' className='form-label'>\r\n                Tags\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='tags'\r\n                name='tags'\r\n                value={tagsToString()}\r\n                placeholder='automation, files, loop'\r\n                onChange={e => stringToTags(e)}\r\n              />\r\n              <div className='form-text'>\r\n                Tags should be separated with a comma. Language tag will be\r\n                added automatically\r\n              </div>\r\n            </div>\r\n\r\n            {/* CODE SECTION */}\r\n            <h5 className='card-title mb-3'>Snippet code</h5>\r\n            <div className='mb-3'>\r\n              <textarea\r\n                className='form-control'\r\n                id='code'\r\n                name='code'\r\n                rows={10}\r\n                value={formData.code}\r\n                placeholder='cp -r ./src ./dest'\r\n                required\r\n                onChange={e => inputHandler(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            {/* AI FEATURES TOGGLE */}\r\n            <div className='mb-3'>\r\n              <div className='form-check'>\r\n                <input\r\n                  className='form-check-input'\r\n                  type='checkbox'\r\n                  id='useAI'\r\n                  checked={useAI}\r\n                  onChange={(e) => setUseAI(e.target.checked)}\r\n                />\r\n                <label className='form-check-label' htmlFor='useAI'>\r\n                  🤖 Enable AI Features (Auto-tagging & Code explanation)\r\n                </label>\r\n              </div>\r\n              <div className='form-text'>\r\n                AI features require an OpenAI API key to be configured\r\n              </div>\r\n            </div>\r\n\r\n            {/* AI AUTO-TAGGER */}\r\n            {useAI && formData.code && formData.language && (\r\n              <div className='mb-3'>\r\n                <AutoTagger\r\n                  code={formData.code}\r\n                  language={formData.language}\r\n                  currentTags={formData.tags}\r\n                  onTagsGenerated={(newTags) => setFormData({...formData, tags: newTags})}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <hr />\r\n\r\n            {/* AI EXPLAINER */}\r\n            {useAI && formData.code && formData.language && (\r\n              <div className='mb-3'>\r\n                <AIExplainer\r\n                  code={formData.code}\r\n                  language={formData.language}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <hr />\r\n\r\n            {/* DOCS SECTION */}\r\n            <h5 className='card-title mb-3'>Snippet documentation</h5>\r\n            <div className='mb-3'>\r\n              <textarea\r\n                className='form-control'\r\n                id='docs'\r\n                name='docs'\r\n                rows={10}\r\n                value={formData.docs}\r\n                placeholder='`-r` flag stands for `--recursive`'\r\n                onChange={e => inputHandler(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            {/* SUBMIT SECTION */}\r\n            <div className='d-grid'>\r\n              <Button\r\n                text={`${inEdit ? 'Update snippet' : 'Create snippet'}`}\r\n                color='secondary'\r\n                type='submit'\r\n              />\r\n            </div>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { SnippetsContext } from '../../store';\r\nimport { NewSnippet } from '../../typescript/interfaces';\r\nimport { Button, Card } from '../UI';\r\n\r\ninterface SmartSnippetFormProps {\r\n  inEdit?: boolean;\r\n}\r\n\r\ninterface AISnippetResponse {\r\n  title: string;\r\n  description: string;\r\n  language: string;\r\n  tags: string[];\r\n  explanation: string;\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport const SmartSnippetForm: React.FC<SmartSnippetFormProps> = ({ inEdit = false }) => {\r\n  const { createSnippet, currentSnippet, updateSnippet } = useContext(SnippetsContext);\r\n\r\n  const [code, setCode] = useState<string>('');\r\n  const [generatedData, setGeneratedData] = useState<Partial<NewSnippet> | null>(null);\r\n  const [isGenerating, setIsGenerating] = useState<boolean>(false);\r\n  const [isEditing, setIsEditing] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  // Editable fields when user wants to modify AI suggestions\r\n  const [editableData, setEditableData] = useState<Partial<NewSnippet>>({\r\n    title: '',\r\n    description: '',\r\n    language: '',\r\n    tags: [],\r\n    docs: '',\r\n    isPinned: false\r\n  });\r\n\r\n  const generateSnippetDetails = async () => {\r\n    if (!code.trim()) {\r\n      setError('Please paste some code first');\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post<AISnippetResponse>('/api/ai/generate-snippet', {\r\n        code: code.trim()\r\n      });\r\n\r\n      if (response.data.success) {\r\n        const generated = {\r\n          title: response.data.title,\r\n          description: response.data.description,\r\n          language: response.data.language,\r\n          code: code.trim(),\r\n          tags: response.data.tags,\r\n          docs: response.data.explanation,\r\n          isPinned: false\r\n        };\r\n\r\n        setGeneratedData(generated);\r\n        setEditableData(generated);\r\n        setError('');\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate snippet details');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleEditableChange = (field: keyof NewSnippet, value: any) => {\r\n    setEditableData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleTagsChange = (tagsString: string) => {\r\n    const tags = tagsString.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\r\n    handleEditableChange('tags', tags);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!editableData.title || !editableData.code) {\r\n      setError('Title and code are required');\r\n      return;\r\n    }\r\n\r\n    const submissionData = {\r\n      ...editableData,\r\n      code,\r\n      useAI: true\r\n    } as NewSnippet;\r\n\r\n    if (inEdit && currentSnippet) {\r\n      updateSnippet(submissionData, currentSnippet.id);\r\n    } else {\r\n      createSnippet(submissionData);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setCode('');\r\n    setGeneratedData(null);\r\n    setEditableData({\r\n      title: '',\r\n      description: '',\r\n      language: '',\r\n      tags: [],\r\n      docs: '',\r\n      isPinned: false\r\n    });\r\n    setIsEditing(false);\r\n    setError('');\r\n  };\r\n\r\n  return (\r\n    <div className='col-12 mt-3'>\r\n      <Card>\r\n        <div className=\"smart-snippet-form\">\r\n          <h5 className='card-title mb-3'>\r\n            🤖 Smart Snippet Creator\r\n            <small className=\"text-muted d-block mt-1\">\r\n              Just paste your code and let AI generate everything else!\r\n            </small>\r\n          </h5>\r\n\r\n          {error && (\r\n            <div className=\"alert alert-danger mb-3\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {/* Step 1: Code Input */}\r\n          <div className=\"step-1 mb-4\">\r\n            <label htmlFor=\"code\" className=\"form-label\">\r\n              <strong>Step 1:</strong> Paste your code here\r\n            </label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"code\"\r\n              rows={10}\r\n              value={code}\r\n              placeholder=\"// Paste your code here...\r\nfunction fibonacci(n) {\r\n  if (n <= 1) return n;\r\n  return fibonacci(n - 1) + fibonacci(n - 2);\r\n}\"\r\n              onChange={(e) => setCode(e.target.value)}\r\n            />\r\n            <div className=\"d-flex gap-2 mt-2\">\r\n              <Button\r\n                text={isGenerating ? 'Analyzing Code...' : '🧠 Generate Details with AI'}\r\n                color=\"primary\"\r\n                handler={generateSnippetDetails}\r\n                disabled={isGenerating || !code.trim()}\r\n              />\r\n              {generatedData && (\r\n                <Button\r\n                  text=\"🔄 Reset\"\r\n                  color=\"secondary\"\r\n                  outline={true}\r\n                  handler={reset}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Step 2: Generated Details */}\r\n          {generatedData && (\r\n            <div className=\"step-2 mb-4\">\r\n              <hr />\r\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                <h6 className=\"mb-0\">\r\n                  <strong>Step 2:</strong> Review & Edit Generated Details\r\n                </h6>\r\n                <Button\r\n                  text={isEditing ? '📖 View Mode' : '✏️ Edit Mode'}\r\n                  color=\"info\"\r\n                  small={true}\r\n                  outline={true}\r\n                  handler={() => setIsEditing(!isEditing)}\r\n                />\r\n              </div>\r\n\r\n              {!isEditing ? (\r\n                // View Mode\r\n                <div className=\"generated-preview\">\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-8\">\r\n                      <div className=\"card border-success\">\r\n                        <div className=\"card-body\">\r\n                          <h6 className=\"card-title text-success\">\r\n                            📝 {editableData.title}\r\n                          </h6>\r\n                          <p className=\"card-text\">{editableData.description}</p>\r\n                          <div className=\"d-flex gap-2 flex-wrap\">\r\n                            <span className=\"badge bg-primary\">{editableData.language}</span>\r\n                            {editableData.tags?.map((tag, index) => (\r\n                              <span key={index} className=\"badge bg-secondary\">{tag}</span>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                      <div className=\"card border-info\">\r\n                        <div className=\"card-body\">\r\n                          <h6 className=\"card-title text-info\">🤖 AI Explanation</h6>\r\n                          <p className=\"card-text\">\r\n                            <small>{editableData.docs}</small>\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                // Edit Mode\r\n                <div className=\"edit-mode\">\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-6\">\r\n                      <label className=\"form-label\">Title</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.title || ''}\r\n                        onChange={(e) => handleEditableChange('title', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                      <label className=\"form-label\">Language</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.language || ''}\r\n                        onChange={(e) => handleEditableChange('language', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label\">Description</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.description || ''}\r\n                        onChange={(e) => handleEditableChange('description', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label\">Tags (comma-separated)</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.tags?.join(', ') || ''}\r\n                        onChange={(e) => handleTagsChange(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label\">Documentation / Explanation</label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        rows={4}\r\n                        value={editableData.docs || ''}\r\n                        onChange={(e) => handleEditableChange('docs', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Step 3: Submit */}\r\n              <hr />\r\n              <div className=\"step-3\">\r\n                <h6><strong>Step 3:</strong> Save Snippet</h6>\r\n                <div className=\"d-grid gap-2 d-md-flex\">\r\n                  <Button\r\n                    text={inEdit ? '💾 Update Snippet' : '💾 Save Snippet'}\r\n                    color=\"success\"\r\n                    handler={handleSubmit}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import { Fragment, useEffect, useContext, useState } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { SnippetForm } from '../components/Snippets/SnippetForm';\r\nimport { SmartSnippetForm } from '../components/Snippets/SmartSnippetForm';\r\nimport { Layout, PageHeader, Button } from '../components/UI';\r\nimport { SnippetsContext } from '../store';\r\n\r\ninterface Params {\r\n  id?: string;\r\n}\r\n\r\nexport const Editor = (): JSX.Element => {\r\n  const { setSnippet: setCurrentSnippet } = useContext(SnippetsContext);\r\n  const [inEdit, setInEdit] = useState(false);\r\n  const [useSmartMode, setUseSmartMode] = useState(true); // Default to smart mode\r\n\r\n  // Get previous location\r\n  const location = useLocation<{ from: string }>();\r\n  const { from } = location.state || '/snippets';\r\n\r\n  // Get id\r\n  const { id } = useParams<Params>();\r\n\r\n  // Set snippet\r\n  useEffect(() => {\r\n    if (id) {\r\n      setCurrentSnippet(+id);\r\n      setInEdit(true);\r\n      setUseSmartMode(false); // Use traditional form for editing\r\n    }\r\n  }, []);\r\n\r\n  const toggleMode = () => {\r\n    setUseSmartMode(!useSmartMode);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {inEdit ? (\r\n        <Fragment>\r\n          <PageHeader<{ from: string }>\r\n            title='Edit snippet'\r\n            prevDest={from}\r\n            prevState={{ from: '/snippets' }}\r\n          />\r\n          <SnippetForm inEdit />\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <PageHeader title='Add new snippet'>\r\n            <div className=\"d-flex gap-2 mt-2\">\r\n              <Button\r\n                text={useSmartMode ? '🤖 Smart Mode' : '📝 Manual Mode'}\r\n                color={useSmartMode ? 'primary' : 'secondary'}\r\n                outline={!useSmartMode}\r\n                handler={toggleMode}\r\n              />\r\n              <span className=\"badge bg-info align-self-center\">\r\n                {useSmartMode ? 'AI-Powered' : 'Traditional'}\r\n              </span>\r\n            </div>\r\n          </PageHeader>\r\n          {useSmartMode ? <SmartSnippetForm /> : <SnippetForm />}\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PageHeader } from '../components/UI';\r\nimport { SmartSnippetForm } from '../components/Snippets/SmartSnippetForm';\r\n\r\nexport const SmartEditor = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"container-xxl my-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <PageHeader title=\"Smart Snippet Creator\">\r\n            <p className=\"text-muted mb-0\">\r\n              Paste your code and let AI generate the title, description, language, and tags for you.\r\n            </p>\r\n          </PageHeader>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <SmartSnippetForm />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { Navbar } from './components/Navigation/Navbar';\r\nimport { Editor, Home, Snippet, Snippets } from './containers';\r\nimport { SmartEditor } from './containers/SmartEditor';\r\nimport { SnippetsContextProvider } from './store';\r\nimport { ThemeProvider } from './contexts/ThemeContext';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <ThemeProvider>\r\n        <SnippetsContextProvider>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/snippets' component={Snippets} />\r\n            <Route path='/snippet/:id' component={Snippet} />\r\n            <Route path='/editor/:id?' component={Editor} />\r\n            <Route path='/smart-create' component={SmartEditor} />\r\n          </Switch>\r\n        </SnippetsContextProvider>\r\n      </ThemeProvider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/style.scss';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}