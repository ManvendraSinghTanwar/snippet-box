{"version":3,"sources":["components/Navigation/Navbar.tsx","store/SnippetsContext.tsx","components/UI/Layout.tsx","components/UI/Badge.tsx","components/UI/Card.tsx","components/UI/PageHeader.tsx","components/UI/Button.tsx","components/UI/EmptyState.tsx","utils/dateParser.ts","utils/badgeColor.ts","utils/findLanguage.ts","utils/searchParser.ts","components/Snippets/SnippetPin.tsx","components/Snippets/SnippetCard.tsx","components/Snippets/SnippetGrid.tsx","components/SearchBar.tsx","containers/Home.tsx","components/Snippets/SnippetCode.tsx","components/Snippets/SnippetDetails.tsx","components/Snippets/SnippetDocs.tsx","containers/Snippet.tsx","containers/Snippets.tsx","components/AI/AutoTagger.tsx","components/AI/AIExplainer.tsx","components/Snippets/SnippetForm.tsx","components/Snippets/SmartSnippetForm.tsx","containers/Editor.tsx","containers/SmartEditor.tsx","App.tsx","index.tsx"],"names":["Navbar","routes","clientRoutes","_jsx","className","children","map","_ref","idx","name","dest","NavLink","exact","to","SnippetsContext","createContext","snippets","searchResults","currentSnippet","tagCount","getSnippets","getSnippetById","id","setSnippet","createSnippet","snippet","updateSnippet","isLocal","deleteSnippet","toggleSnippetPin","countTags","searchSnippets","query","SnippetsContextProvider","props","setSnippets","useState","setSearchResults","setCurrentSnippet","setTagCount","history","useHistory","redirectOnError","push","axios","get","concat","then","res","data","catch","err","find","s","put","oldSnippetIdx","findIndex","slice","pathname","state","from","context","post","window","confirm","delete","deletedSnippetIdx","_objectSpread","isPinned","console","log","Provider","value","Layout","Badge","text","color","onClick","style","cursor","Card","title","classes","bodyClasses","parentClasses","childClasses","_jsxs","PageHeader","prevDest","prevState","Link","Button","outline","small","handler","type","disabled","elClasses","join","EmptyState","editorLink","dateParser","date","dayjs","extend","relativeTime","customParseFormat","dateFormat","test","toString","parsedDate","formatted","format","relative","fromNow","badgeColor","language","toLowerCase","charCodeAt","searchParser","rawQuery","tags","extractFilters","languages","replaceAll","trim","filter","filters","regex","RegExp","matcher","match","split","SnippetPin","useContext","Icon","path","mdiPin","size","mdiPinOutline","SnippetCard","description","code","createdAt","location","copyHandler","copy","SnippetGrid","SearchBar","inputRef","useRef","document","createElement","useEffect","current","focus","placeholder","ref","onKeyUp","e","key","inputHandler","href","target","rel","Home","length","Fragment","some","SnippetCode","syntax","search","aliases","alias","findLanguage","hljs","highlightAll","whiteSpace","borderRadius","SnippetDetails","updatedAt","creationDate","updateDate","tag","rowGap","protocol","host","rawUrl","SnippetDocs","ReactMarkdown","markdown","Snippet","useParams","useLocation","docs","Snippets","setFilter","localSnippets","setLocalSnippets","isActiveFilter","filteredSnippets","includes","filterHandler","count","clearFilterHandler","AutoTagger","currentTags","onTagsGenerated","loading","setLoading","suggestedTags","setSuggestedTags","error","setError","async","response","success","newTags","_err$response","_err$response$data","addAllTags","updatedTags","index","t","addTag","AIExplainer","aiExplanation","explanation","setExplanation","SnippetForm","inEdit","formData","setFormData","useAI","setUseAI","onSubmit","preventDefault","submissionData","formHandler","htmlFor","required","onChange","stringToTags","rows","checked","SmartSnippetForm","_editableData$tags","_editableData$tags2","setCode","generatedData","setGeneratedData","isGenerating","setIsGenerating","isEditing","setIsEditing","editableData","setEditableData","handleEditableChange","field","prev","generated","reset","tagsString","handleTagsChange","handleSubmit","Editor","setInEdit","useSmartMode","setUseSmartMode","toggleMode","SmartEditor","App","BrowserRouter","Switch","Route","component","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.969d1b5b.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\nimport { Route } from '../../typescript/interfaces';\r\nimport { routes as clientRoutes } from './routes.json';\r\n\r\nexport const Navbar = (): JSX.Element => {\r\n  const routes = clientRoutes as Route[];\r\n\r\n  return (\r\n    <nav className='navbar navbar-dark bg-dark navbar-expand'>\r\n      <div className='container-fluid'>\r\n        <ul className='navbar-nav'>\r\n          {routes.map(({ name, dest }, idx) => (\r\n            <li className='nav-item' key={idx}>\r\n              <NavLink exact to={dest} className='nav-link'>\r\n                {name}\r\n              </NavLink>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import { useState, createContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  Context,\r\n  Snippet,\r\n  Response,\r\n  TagCount,\r\n  NewSnippet,\r\n  SearchQuery\r\n} from '../typescript/interfaces';\r\n\r\nexport const SnippetsContext = createContext<Context>({\r\n  snippets: [],\r\n  searchResults: [],\r\n  currentSnippet: null,\r\n  tagCount: [],\r\n  getSnippets: () => {},\r\n  getSnippetById: (id: number) => {},\r\n  setSnippet: (id: number) => {},\r\n  createSnippet: (snippet: NewSnippet) => {},\r\n  updateSnippet: (snippet: NewSnippet, id: number, isLocal?: boolean) => {},\r\n  deleteSnippet: (id: number) => {},\r\n  toggleSnippetPin: (id: number) => {},\r\n  countTags: () => {},\r\n  searchSnippets: (query: SearchQuery) => {}\r\n});\r\n\r\ninterface Props {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport const SnippetsContextProvider = (props: Props): JSX.Element => {\r\n  const [snippets, setSnippets] = useState<Snippet[]>([]);\r\n  const [searchResults, setSearchResults] = useState<Snippet[]>([]);\r\n  const [currentSnippet, setCurrentSnippet] = useState<Snippet | null>(null);\r\n  const [tagCount, setTagCount] = useState<TagCount[]>([]);\r\n\r\n  const history = useHistory();\r\n\r\n  const redirectOnError = () => {\r\n    history.push('/');\r\n  };\r\n\r\n  const getSnippets = (): void => {\r\n    axios\r\n      .get<Response<Snippet[]>>('/api/snippets')\r\n      .then(res => setSnippets(res.data.data))\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const getSnippetById = (id: number): void => {\r\n    axios\r\n      .get<Response<Snippet>>(`/api/snippets/${id}`)\r\n      .then(res => setCurrentSnippet(res.data.data))\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const setSnippet = (id: number): void => {\r\n    if (id < 0) {\r\n      setCurrentSnippet(null);\r\n      return;\r\n    }\r\n\r\n    getSnippetById(id);\r\n\r\n    const snippet = snippets.find(s => s.id === id);\r\n\r\n    if (snippet) {\r\n      setCurrentSnippet(snippet);\r\n    }\r\n  };\r\n\r\n  const createSnippet = (snippet: NewSnippet): void => {\r\n    axios\r\n      .post<Response<Snippet>>('/api/snippets', snippet)\r\n      .then(res => {\r\n        setSnippets([...snippets, res.data.data]);\r\n        setCurrentSnippet(res.data.data);\r\n        history.push({\r\n          pathname: `/snippet/${res.data.data.id}`,\r\n          state: { from: '/snippets' }\r\n        });\r\n      })\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const updateSnippet = (\r\n    snippet: NewSnippet,\r\n    id: number,\r\n    isLocal?: boolean\r\n  ): void => {\r\n    axios\r\n      .put<Response<Snippet>>(`/api/snippets/${id}`, snippet)\r\n      .then(res => {\r\n        const oldSnippetIdx = snippets.findIndex(s => s.id === id);\r\n        setSnippets([\r\n          ...snippets.slice(0, oldSnippetIdx),\r\n          res.data.data,\r\n          ...snippets.slice(oldSnippetIdx + 1)\r\n        ]);\r\n        setCurrentSnippet(res.data.data);\r\n\r\n        if (!isLocal) {\r\n          history.push({\r\n            pathname: `/snippet/${res.data.data.id}`,\r\n            state: { from: '/snippets' }\r\n          });\r\n        }\r\n      })\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const deleteSnippet = (id: number): void => {\r\n    if (window.confirm('Are you sure you want to delete this snippet?')) {\r\n      axios\r\n        .delete<Response<{}>>(`/api/snippets/${id}`)\r\n        .then(res => {\r\n          const deletedSnippetIdx = snippets.findIndex(s => s.id === id);\r\n          setSnippets([\r\n            ...snippets.slice(0, deletedSnippetIdx),\r\n            ...snippets.slice(deletedSnippetIdx + 1)\r\n          ]);\r\n          setSnippet(-1);\r\n          history.push('/snippets');\r\n        })\r\n        .catch(err => redirectOnError());\r\n    }\r\n  };\r\n\r\n  const toggleSnippetPin = (id: number): void => {\r\n    const snippet = snippets.find(s => s.id === id);\r\n\r\n    if (snippet) {\r\n      updateSnippet({ ...snippet, isPinned: !snippet.isPinned }, id, true);\r\n    }\r\n  };\r\n\r\n  const countTags = (): void => {\r\n    axios\r\n      .get<Response<TagCount[]>>('/api/snippets/statistics/count')\r\n      .then(res => setTagCount(res.data.data))\r\n      .catch(err => redirectOnError());\r\n  };\r\n\r\n  const searchSnippets = (query: SearchQuery): void => {\r\n    axios\r\n      .post<Response<Snippet[]>>('/api/snippets/search', query)\r\n      .then(res => {\r\n        setSearchResults(res.data.data);\r\n        console.log(res.data.data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  const context = {\r\n    snippets,\r\n    searchResults,\r\n    currentSnippet,\r\n    tagCount,\r\n    getSnippets,\r\n    getSnippetById,\r\n    setSnippet,\r\n    createSnippet,\r\n    updateSnippet,\r\n    deleteSnippet,\r\n    toggleSnippetPin,\r\n    countTags,\r\n    searchSnippets\r\n  };\r\n\r\n  return (\r\n    <SnippetsContext.Provider value={context}>\r\n      {props.children}\r\n    </SnippetsContext.Provider>\r\n  );\r\n};\r\n","interface Props {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport const Layout = (props: Props): JSX.Element => {\r\n  return (\r\n    <div className='container-lg'>\r\n      <div className='row py-4'>{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { Color } from '../../typescript/types';\r\n\r\ninterface Props {\r\n  text: string;\r\n  color: Color;\r\n  onClick?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const Badge = (props: Props): JSX.Element => {\r\n  const { text, color, onClick, className = '' } = props;\r\n\r\n  return (\r\n    <span \r\n      className={`badge bg-${color} ${className} ${onClick ? 'cursor-pointer' : ''}`}\r\n      onClick={onClick}\r\n      style={onClick ? { cursor: 'pointer' } : {}}\r\n    >\r\n      {text}\r\n    </span>\r\n  );\r\n};\r\n","import { ReactNode } from 'react';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  children?: ReactNode;\r\n  classes?: string;\r\n  bodyClasses?: string;\r\n}\r\n\r\nexport const Card = (props: Props): JSX.Element => {\r\n  const { title, children, classes = '', bodyClasses = '' } = props;\r\n\r\n  const parentClasses = `card mb-3 ${classes}`;\r\n  const childClasses = `card-body ${bodyClasses}`;\r\n\r\n  return (\r\n    <div className={parentClasses}>\r\n      <div className={childClasses}>\r\n        <h5 className='card-title'>{title}</h5>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\n\r\ninterface Props<T> {\r\n  title: string;\r\n  prevDest?: string;\r\n  prevState?: T;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport const PageHeader = <T,>(props: Props<T>): JSX.Element => {\r\n  const { title, prevDest, prevState, children } = props;\r\n\r\n  return (\r\n    <div className='col-12'>\r\n      <h4>{title}</h4>\r\n      {prevDest && (\r\n        <h6>\r\n          <Link\r\n            to={{\r\n              pathname: prevDest,\r\n              state: prevState\r\n            }}\r\n            className='text-decoration-none text-light'\r\n          >\r\n            &lt;- Go back\r\n          </Link>\r\n        </h6>\r\n      )}\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { Color } from '../../typescript/types';\r\n\r\ninterface Props {\r\n  text: string;\r\n  color: Color;\r\n  outline?: boolean;\r\n  small?: boolean;\r\n  handler?: () => void;\r\n  classes?: string;\r\n  type?: 'button' | 'submit' | 'reset';\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const Button = (props: Props): JSX.Element => {\r\n  const {\r\n    text,\r\n    color,\r\n    outline = false,\r\n    small = false,\r\n    handler,\r\n    classes = '',\r\n    type = 'button',\r\n    disabled = false\r\n  } = props;\r\n\r\n  const elClasses = [\r\n    'btn',\r\n    outline ? `btn-outline-${color}` : `btn-${color}`,\r\n    small && 'btn-sm',\r\n    classes\r\n  ];\r\n\r\n  return (\r\n    <button \r\n      type={type} \r\n      className={elClasses.join(' ')} \r\n      onClick={handler}\r\n      disabled={disabled}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\n\r\nexport const EmptyState = (): JSX.Element => {\r\n  const editorLink = (\r\n    <Link to='/editor' className='fw-bold text-success text-decoration-none'>\r\n      <span>editor</span>\r\n    </Link>\r\n  );\r\n\r\n  return (\r\n    <div className='col-12 d-flex flex-column align-items-center'>\r\n      <h4>You currently don't have any snippets</h4>\r\n      <p>Go to the {editorLink} and create one</p>\r\n    </div>\r\n  );\r\n};\r\n","import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\r\n\r\ninterface Return {\r\n  formatted: string;\r\n  relative: string;\r\n}\r\n\r\nexport const dateParser = (date: Date): Return => {\r\n  dayjs.extend(relativeTime);\r\n  dayjs.extend(customParseFormat);\r\n\r\n  // test date format\r\n  const regex = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.|\\+|-|Z)+/;\r\n  const dateFormat = regex.test(date.toString())\r\n    ? 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\r\n    : 'YYYY-MM-DD HH:mm:ss.SSS Z';\r\n\r\n  // parse date\r\n  const parsedDate = dayjs(date, dateFormat);\r\n  const formatted = parsedDate.format('YYYY-MM-DD HH:mm');\r\n  const relative = parsedDate.fromNow();\r\n\r\n  return { formatted, relative };\r\n};\r\n","import { Color } from '../typescript/types';\r\n\r\nexport const badgeColor = (language: string): Color => {\r\n  const code = language.toLowerCase().charCodeAt(0);\r\n  let color: Color = 'primary';\r\n\r\n  switch (code % 6) {\r\n    case 0:\r\n    default:\r\n      color = 'primary';\r\n      break;\r\n    case 1:\r\n      color = 'success';\r\n      break;\r\n    case 2:\r\n      color = 'info';\r\n      break;\r\n    case 3:\r\n      color = 'warning';\r\n      break;\r\n    case 4:\r\n      color = 'danger';\r\n      break;\r\n    case 5:\r\n      color = 'light';\r\n      break;\r\n  }\r\n\r\n  return color;\r\n};\r\n","import { aliases } from '../data/aliases_raw.json';\r\n\r\nexport const findLanguage = (language: string): boolean => {\r\n  const search = language.toLowerCase();\r\n  return aliases.some(alias => alias === search);\r\n};\r\n","import { SearchQuery } from '../typescript/interfaces';\r\n\r\nexport const searchParser = (rawQuery: string): SearchQuery => {\r\n  // Extract filters from query\r\n  const tags = extractFilters(rawQuery, 'tags');\r\n  const languages = extractFilters(rawQuery, 'lang');\r\n  const query = rawQuery.replaceAll(/(tags|lang):[a-zA-Z]+(,[a-zA-Z]+)*/g, '');\r\n\r\n  return {\r\n    query: query.trim(),\r\n    tags,\r\n    languages\r\n  };\r\n};\r\n\r\nconst extractFilters = (query: string, filter: string): string[] => {\r\n  let filters: string[] = [];\r\n\r\n  const regex = new RegExp(filter + ':[a-zA-Z]+(,[a-zA-Z]+)*');\r\n  const matcher = query.match(regex);\r\n\r\n  if (matcher) {\r\n    filters = matcher[0].split(':')[1].split(',');\r\n  }\r\n\r\n  return filters;\r\n};\r\n","import { useContext } from 'react';\r\nimport { SnippetsContext } from '../../store';\r\nimport Icon from '@mdi/react';\r\nimport { mdiPin, mdiPinOutline } from '@mdi/js';\r\n\r\ninterface Props {\r\n  id: number;\r\n  isPinned: boolean;\r\n}\r\n\r\nexport const SnippetPin = (props: Props): JSX.Element => {\r\n  const { toggleSnippetPin } = useContext(SnippetsContext);\r\n  const { id, isPinned } = props;\r\n\r\n  return (\r\n    <div onClick={() => toggleSnippetPin(id)} className='cursor-pointer'>\r\n      {isPinned ? (\r\n        <Icon path={mdiPin} size={0.8} color='#20c997' />\r\n      ) : (\r\n        <Icon path={mdiPinOutline} size={0.8} color='#ced4da' />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { Snippet } from '../../typescript/interfaces';\r\nimport { dateParser, badgeColor } from '../../utils';\r\nimport { Badge, Button, Card } from '../UI';\r\nimport { SnippetsContext } from '../../store';\r\nimport copy from 'clipboard-copy';\r\nimport { SnippetPin } from './SnippetPin';\r\n\r\ninterface Props {\r\n  snippet: Snippet;\r\n}\r\n\r\nexport const SnippetCard = (props: Props): JSX.Element => {\r\n  const { title, description, language, code, id, createdAt, isPinned } =\r\n    props.snippet;\r\n  const { setSnippet } = useContext(SnippetsContext);\r\n\r\n  const copyHandler = () => {\r\n    copy(code);\r\n  };\r\n\r\n  return (\r\n    <Card classes='h-100' bodyClasses='d-flex flex-column'>\r\n      {/* TITLE */}\r\n      <h5 className='card-title d-flex align-items-center justify-content-between'>\r\n        {title}\r\n        <SnippetPin id={id} isPinned={isPinned} />\r\n      </h5>\r\n\r\n      <h6 className='card-subtitle mb-2 text-muted'>\r\n        {/* LANGUAGE */}\r\n        <Badge text={language} color={badgeColor(language)} />\r\n      </h6>\r\n\r\n      {/* DESCRIPTION */}\r\n      <p>{description ? description : 'No description'}</p>\r\n\r\n      <div className='mt-auto'>\r\n        {/* UPDATE DATE */}\r\n        <p>Created {dateParser(createdAt).relative}</p>\r\n        <hr />\r\n\r\n        {/* ACTIONS */}\r\n        <div className='d-flex justify-content-end'>\r\n          <Link\r\n            to={{\r\n              pathname: `/snippet/${id}`,\r\n              state: { from: window.location.pathname }\r\n            }}\r\n          >\r\n            <Button\r\n              text='View'\r\n              color='secondary'\r\n              small\r\n              outline\r\n              classes='me-2'\r\n              handler={() => {\r\n                setSnippet(id);\r\n              }}\r\n            />\r\n          </Link>\r\n          <Button\r\n            text='Copy code'\r\n            color='secondary'\r\n            small\r\n            handler={copyHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n","import { Snippet } from '../../typescript/interfaces';\r\nimport { SnippetCard } from './SnippetCard';\r\n\r\ninterface Props {\r\n  snippets: Snippet[];\r\n}\r\n\r\nexport const SnippetGrid = (props: Props): JSX.Element => {\r\n  const { snippets } = props;\r\n\r\n  return (\r\n    <div className='row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4'>\r\n      {snippets.map(snippet => (\r\n        <div className='col' key={snippet.id}>\r\n          <SnippetCard snippet={snippet} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { useRef, useEffect, KeyboardEvent, useContext } from 'react';\r\nimport { SnippetsContext } from '../store';\r\nimport { searchParser } from '../utils';\r\n\r\nexport const SearchBar = (): JSX.Element => {\r\n  const { searchSnippets } = useContext(SnippetsContext);\r\n  const inputRef = useRef<HTMLInputElement>(document.createElement('input'));\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, [inputRef]);\r\n\r\n  const inputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    const query = searchParser(inputRef.current.value);\r\n\r\n    if (e.key === 'Enter') {\r\n      searchSnippets(query);\r\n    } else if (e.key === 'Escape') {\r\n      inputRef.current.value = '';\r\n      searchSnippets(searchParser(inputRef.current.value));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='mb-3'>\r\n      <input\r\n        type='text'\r\n        className='form-control'\r\n        placeholder='card lang:typescript tags:ui,react'\r\n        ref={inputRef}\r\n        onKeyUp={e => inputHandler(e)}\r\n      />\r\n      <div className='form-text text-gray ms-1'>\r\n        Search by pressing `Enter`. Clear with `Esc`. Read more about available\r\n        filters{' '}\r\n        <a\r\n          href='https://github.com/pawelmalak/snippet-box/wiki/Search-filters'\r\n          target='_blank'\r\n          rel='noreferrer'\r\n          className='text-success text-decoration-none'\r\n        >\r\n          here\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useContext, Fragment } from 'react';\r\nimport { SnippetsContext } from '../store';\r\nimport { Layout, PageHeader, EmptyState } from '../components/UI';\r\nimport { SnippetGrid } from '../components/Snippets/SnippetGrid';\r\nimport { SearchBar } from '../components/SearchBar';\r\n\r\nexport const Home = (): JSX.Element => {\r\n  const { snippets, getSnippets, searchResults } = useContext(SnippetsContext);\r\n\r\n  useEffect(() => {\r\n    getSnippets();\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      {snippets.length === 0 ? (\r\n        <EmptyState />\r\n      ) : (\r\n        <Fragment>\r\n          <PageHeader title='Search' />\r\n          <SearchBar />\r\n          <div className='col-12 mb-4'>\r\n            <SnippetGrid snippets={searchResults} />\r\n          </div>\r\n\r\n          {snippets.some(s => s.isPinned) && (\r\n            <Fragment>\r\n              <PageHeader title='Pinned snippets' />\r\n              <div className='col-12 mt-3'>\r\n                <SnippetGrid snippets={snippets.filter(s => s.isPinned)} />\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { findLanguage } from '../../utils';\r\nimport hljs from 'highlight.js';\r\nimport 'highlight.js/styles/atom-one-dark.css';\r\n\r\ninterface Props {\r\n  code: string;\r\n  language: string;\r\n}\r\n\r\nexport const SnippetCode = (props: Props): JSX.Element => {\r\n  const { code, language } = props;\r\n\r\n  const syntax = findLanguage(language) ? language : 'plaintext';\r\n\r\n  useEffect(() => {\r\n    hljs.highlightAll();\r\n  }, []);\r\n\r\n  return (\r\n    <pre>\r\n      <code\r\n        className={`language-${syntax.toLowerCase()}`}\r\n        style={{ whiteSpace: 'pre-wrap', borderRadius: '4px' }}\r\n      >\r\n        {code}\r\n      </code>\r\n    </pre>\r\n  );\r\n};\r\n","import { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SnippetsContext } from '../../store';\r\nimport { Snippet } from '../../typescript/interfaces';\r\nimport { dateParser } from '../../utils';\r\nimport { Badge, Button, Card } from '../UI';\r\nimport copy from 'clipboard-copy';\r\nimport { SnippetPin } from './SnippetPin';\r\n\r\ninterface Props {\r\n  snippet: Snippet;\r\n}\r\n\r\nexport const SnippetDetails = (props: Props): JSX.Element => {\r\n  const {\r\n    title,\r\n    language,\r\n    tags,\r\n    createdAt,\r\n    updatedAt,\r\n    description,\r\n    code,\r\n    id,\r\n    isPinned\r\n  } = props.snippet;\r\n\r\n  const history = useHistory();\r\n\r\n  const { deleteSnippet, setSnippet } = useContext(SnippetsContext);\r\n\r\n  const creationDate = dateParser(createdAt);\r\n  const updateDate = dateParser(updatedAt);\r\n\r\n  // const copyHandler = () => {\r\n  //   copy(code);\r\n  // };\r\n\r\n  return (\r\n    <Card>\r\n      <h5 className='card-title d-flex align-items-center justify-content-between'>\r\n        {title}\r\n        <SnippetPin id={id} isPinned={isPinned} />\r\n      </h5>\r\n      <p>{description}</p>\r\n\r\n      {/* LANGUAGE */}\r\n      <div className={`d-flex justify-content-between`}>\r\n        <span>Language</span>\r\n        <span className='fw-bold'>{language}</span>\r\n      </div>\r\n\r\n      {/* CREATED AT */}\r\n      <div className={`d-flex justify-content-between`}>\r\n        <span>Created</span>\r\n        <span>{creationDate.relative}</span>\r\n      </div>\r\n\r\n      {/* UPDATED AT */}\r\n      <div className={`d-flex justify-content-between`}>\r\n        <span>Last updated</span>\r\n        <span>{updateDate.relative}</span>\r\n      </div>\r\n      <hr />\r\n\r\n      {/* TAGS */}\r\n      <div>\r\n        {tags.map((tag, idx) => (\r\n          <span className='me-2' key={idx}>\r\n            <Badge text={tag} color='light' />\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <hr />\r\n\r\n      {/* ACTIONS */}\r\n      <div className='d-grid g-2' style={{ rowGap: '10px' }}>\r\n        <Button\r\n          text='Delete'\r\n          color='danger'\r\n          small\r\n          outline\r\n          handler={() => deleteSnippet(id)}\r\n        />\r\n\r\n        <Button\r\n          text='Edit'\r\n          color='secondary'\r\n          small\r\n          outline\r\n          handler={() => {\r\n            setSnippet(id);\r\n            history.push({\r\n              pathname: `/editor/${id}`,\r\n              state: { from: window.location.pathname }\r\n            });\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          text='Copy raw url'\r\n          color='secondary'\r\n          small\r\n          outline\r\n          handler={() => {\r\n            const { protocol, host } = window.location;\r\n            const rawUrl = `${protocol}//${host}/api/snippets/raw/${id}`;\r\n            copy(rawUrl);\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          text='Copy code'\r\n          color='secondary'\r\n          small\r\n          handler={() => copy(code)}\r\n        />\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n","import ReactMarkdown from 'react-markdown';\r\n\r\ninterface Props {\r\n  markdown: string;\r\n}\r\n\r\nexport const SnippetDocs = (props: Props): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <ReactMarkdown>{props.markdown}</ReactMarkdown>\r\n    </div>\r\n  );\r\n};\r\n","import { Fragment, useContext, useEffect } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport { SnippetCode } from '../components/Snippets/SnippetCode';\r\nimport { Layout, PageHeader, Card } from '../components/UI';\r\nimport { SnippetsContext } from '../store';\r\nimport { SnippetDetails } from '../components/Snippets/SnippetDetails';\r\nimport { SnippetDocs } from '../components/Snippets/SnippetDocs';\r\n\r\ninterface Params {\r\n  id: string;\r\n}\r\n\r\nexport const Snippet = (): JSX.Element => {\r\n  const { currentSnippet, getSnippetById } = useContext(SnippetsContext);\r\n  const { id } = useParams<Params>();\r\n\r\n  // Get previous location\r\n  const location = useLocation<{ from: string }>();\r\n  const { from } = location.state || '/snippets';\r\n\r\n  useEffect(() => {\r\n    getSnippetById(+id);\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      {!currentSnippet ? (\r\n        <div className='col-12'>Loading...</div>\r\n      ) : (\r\n        <Fragment>\r\n          <PageHeader title='' prevDest={from} />\r\n          <div className='col-12 col-md-7 col-lg-8 mt-3'>\r\n            <SnippetCode\r\n              code={currentSnippet.code}\r\n              language={currentSnippet.language}\r\n            />\r\n          </div>\r\n          <div className='col-12 col-md-5 col-lg-4 mt-md-3'>\r\n            <SnippetDetails snippet={currentSnippet} />\r\n          </div>\r\n          {currentSnippet.docs && (\r\n            <div className='col-12'>\r\n              <Card title='Snippet documentation'>\r\n                <hr />\r\n                <SnippetDocs markdown={currentSnippet.docs} />\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import { useEffect, useContext, useState, Fragment } from 'react';\r\nimport { SnippetsContext } from '../store';\r\nimport { SnippetGrid } from '../components/Snippets/SnippetGrid';\r\nimport { Button, Card, EmptyState, Layout } from '../components/UI';\r\nimport { Snippet } from '../typescript/interfaces';\r\n\r\nexport const Snippets = (): JSX.Element => {\r\n  const { snippets, tagCount, getSnippets, countTags } =\r\n    useContext(SnippetsContext);\r\n\r\n  const [filter, setFilter] = useState<string | null>(null);\r\n  const [localSnippets, setLocalSnippets] = useState<Snippet[]>([]);\r\n\r\n  useEffect(() => {\r\n    getSnippets();\r\n    countTags();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLocalSnippets([...snippets]);\r\n  }, [snippets]);\r\n\r\n  const filterHandler = (tag: string) => {\r\n    setFilter(tag);\r\n    const filteredSnippets = snippets.filter(s => s.tags.includes(tag));\r\n    setLocalSnippets(filteredSnippets);\r\n  };\r\n\r\n  const clearFilterHandler = () => {\r\n    setFilter(null);\r\n    setLocalSnippets([...snippets]);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {snippets.length === 0 ? (\r\n        <EmptyState />\r\n      ) : (\r\n        <Fragment>\r\n          <div className='col-12 col-md-4 col-lg-3'>\r\n            <Card>\r\n              <h5 className='card-title'>All snippets</h5>\r\n              <div className='mb-3 d-flex justify-content-between'>\r\n                <span>Total</span>\r\n                <span>{snippets.length}</span>\r\n              </div>\r\n              <hr />\r\n\r\n              <h5 className='card-title'>Filter by tags</h5>\r\n              <Fragment>\r\n                {tagCount.map((tag, idx) => {\r\n                  const isActiveFilter = filter === tag.name;\r\n\r\n                  return (\r\n                    <div\r\n                      key={idx}\r\n                      className={`d-flex justify-content-between cursor-pointer ${\r\n                        isActiveFilter && 'text-success'\r\n                      }`}\r\n                      onClick={() => filterHandler(tag.name)}\r\n                    >\r\n                      <span>{tag.name}</span>\r\n                      <span>{tag.count}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </Fragment>\r\n              <div className='d-grid mt-3'>\r\n                <Button\r\n                  text='Clear filters'\r\n                  color='secondary'\r\n                  small\r\n                  outline\r\n                  handler={clearFilterHandler}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n          <div className='col-12 col-md-8 col-lg-9'>\r\n            <SnippetGrid snippets={localSnippets} />\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Badge } from '../UI';\r\n\r\ninterface AutoTaggerProps {\r\n  code: string;\r\n  language: string;\r\n  currentTags: string[];\r\n  onTagsGenerated: (tags: string[]) => void;\r\n}\r\n\r\ninterface TagResponse {\r\n  tags: string[];\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nconst AutoTagger: React.FC<AutoTaggerProps> = ({ \r\n  code, \r\n  language, \r\n  currentTags, \r\n  onTagsGenerated \r\n}) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const generateTags = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post<TagResponse>('/api/ai/generate-tags', {\r\n        code,\r\n        language\r\n      });\r\n\r\n      if (response.data.success) {\r\n        const newTags = response.data.tags.filter(tag => \r\n          !currentTags.includes(tag.toLowerCase())\r\n        );\r\n        setSuggestedTags(newTags);\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate tags');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const addTag = (tag: string) => {\r\n    const updatedTags = [...currentTags, tag];\r\n    onTagsGenerated(updatedTags);\r\n    setSuggestedTags(suggestedTags.filter(t => t !== tag));\r\n  };\r\n\r\n  const addAllTags = () => {\r\n    const updatedTags = [...currentTags, ...suggestedTags];\r\n    onTagsGenerated(updatedTags);\r\n    setSuggestedTags([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"auto-tagger\">\r\n      <div className=\"d-flex align-items-center mb-2\">\r\n        <label className=\"form-label mb-0\">🏷️ Smart Tags</label>\r\n        <Button\r\n          text={loading ? 'Generating...' : 'Generate AI Tags'}\r\n          color=\"success\"\r\n          small={true}\r\n          outline={true}\r\n          handler={generateTags}\r\n          classes=\"ms-2\"\r\n        />\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-warning alert-sm mb-2\">\r\n          <small>{error}</small>\r\n        </div>\r\n      )}\r\n\r\n      {suggestedTags.length > 0 && (\r\n        <div className=\"suggested-tags p-2 bg-light rounded border\">\r\n          <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n            <small className=\"text-muted\">AI Suggested Tags:</small>\r\n            <Button\r\n              text=\"Add All\"\r\n              color=\"success\"\r\n              small={true}\r\n              handler={addAllTags}\r\n            />\r\n          </div>\r\n          <div className=\"d-flex flex-wrap gap-1\">\r\n            {suggestedTags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"badge bg-primary cursor-pointer me-1 mb-1\"\r\n                onClick={() => addTag(tag)}\r\n                title={`Click to add \"${tag}\" to your tags`}\r\n                style={{ cursor: 'pointer' }}\r\n              >\r\n                {tag} <span className=\"ms-1\">+</span>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {currentTags.length > 0 && (\r\n        <div className=\"current-tags mt-2\">\r\n          <small className=\"text-muted d-block mb-1\">Current Tags:</small>\r\n          <div className=\"d-flex flex-wrap gap-1\">\r\n            {currentTags.map((tag, index) => (\r\n              <Badge key={index} text={tag} color=\"primary\" />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoTagger;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button } from '../UI';\r\n\r\ninterface AIExplainerProps {\r\n  code: string;\r\n  language: string;\r\n  aiExplanation?: string;\r\n}\r\n\r\ninterface AIResponse {\r\n  explanation: string;\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nconst AIExplainer: React.FC<AIExplainerProps> = ({ code, language, aiExplanation }) => {\r\n  const [explanation, setExplanation] = useState<string>(aiExplanation || '');\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const explainCode = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post<AIResponse>('/api/ai/explain', {\r\n        code,\r\n        language\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setExplanation(response.data.explanation);\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate explanation');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ai-explainer\">\r\n      <div className=\"d-flex align-items-center mb-2\">\r\n        <h6 className=\"mb-0\">🤖 AI Code Explanation</h6>\r\n        <Button\r\n          text={loading ? 'Analyzing...' : (explanation ? 'Refresh Explanation' : 'Explain Code')}\r\n          color=\"primary\"\r\n          outline={true}\r\n          small={true}\r\n          handler={explainCode}\r\n          classes=\"ms-2\"\r\n        />\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"alert alert-warning alert-sm\">\r\n          <small>{error}</small>\r\n        </div>\r\n      )}\r\n\r\n      {explanation && (\r\n        <div className=\"ai-explanation p-3 bg-light rounded border\">\r\n          <small className=\"text-muted d-block mb-1\">AI Generated Explanation:</small>\r\n          <p className=\"mb-0\">{explanation}</p>\r\n        </div>\r\n      )}\r\n\r\n      {!explanation && !loading && (\r\n        <div className=\"text-muted\">\r\n          <small>Click \"Explain Code\" to get an AI-powered explanation of this code snippet.</small>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIExplainer;\r\n","import {\r\n  ChangeEvent,\r\n  FormEvent,\r\n  Fragment,\r\n  useState,\r\n  useContext,\r\n  useEffect\r\n} from 'react';\r\nimport { SnippetsContext } from '../../store';\r\nimport { NewSnippet } from '../../typescript/interfaces';\r\nimport { Button, Card } from '../UI';\r\nimport AutoTagger from '../AI/AutoTagger';\r\nimport AIExplainer from '../AI/AIExplainer';\r\n\r\ninterface Props {\r\n  inEdit?: boolean;\r\n}\r\n\r\nexport const SnippetForm = (props: Props): JSX.Element => {\r\n  const { inEdit = false } = props;\r\n  const { createSnippet, currentSnippet, updateSnippet } =\r\n    useContext(SnippetsContext);\r\n\r\n  const [formData, setFormData] = useState<NewSnippet>({\r\n    title: '',\r\n    description: '',\r\n    language: '',\r\n    code: '',\r\n    docs: '',\r\n    isPinned: false,\r\n    tags: []\r\n  });\r\n\r\n  const [useAI, setUseAI] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (inEdit) {\r\n      if (currentSnippet) {\r\n        setFormData({ ...currentSnippet });\r\n      }\r\n    }\r\n  }, [currentSnippet]);\r\n\r\n  const inputHandler = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const stringToTags = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const tags = e.target.value.split(',');\r\n    setFormData({\r\n      ...formData,\r\n      tags\r\n    });\r\n  };\r\n\r\n  const tagsToString = (): string => {\r\n    return formData.tags.join(',');\r\n  };\r\n\r\n  const formHandler = (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const submissionData = {\r\n      ...formData,\r\n      useAI\r\n    };\r\n\r\n    if (inEdit) {\r\n      if (currentSnippet) {\r\n        updateSnippet(submissionData, currentSnippet.id);\r\n      }\r\n    } else {\r\n      createSnippet(submissionData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='col-12 mt-3'>\r\n        <Card>\r\n          <form onSubmit={e => formHandler(e)}>\r\n            {/* DETAILS SECTION */}\r\n            <h5 className='card-title mb-3'>Snippet details</h5>\r\n\r\n            {/* TITLE */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='title' className='form-label'>\r\n                Title\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='title'\r\n                name='title'\r\n                value={formData.title}\r\n                placeholder='Recursively copy all files'\r\n                required\r\n                onChange={e => inputHandler(e)}\r\n              />\r\n            </div>\r\n\r\n            {/* DESCRIPTION */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='description' className='form-label'>\r\n                Short description\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='description'\r\n                name='description'\r\n                value={formData.description}\r\n                placeholder='Bash script to copy all files from src to dest'\r\n                onChange={e => inputHandler(e)}\r\n              />\r\n            </div>\r\n\r\n            {/* LANGUAGE */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='language' className='form-label'>\r\n                Language\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='language'\r\n                name='language'\r\n                value={formData.language}\r\n                placeholder='python'\r\n                required\r\n                onChange={e => inputHandler(e)}\r\n              />\r\n            </div>\r\n\r\n            {/* TAGS */}\r\n            <div className='mb-3'>\r\n              <label htmlFor='tags' className='form-label'>\r\n                Tags\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                id='tags'\r\n                name='tags'\r\n                value={tagsToString()}\r\n                placeholder='automation, files, loop'\r\n                onChange={e => stringToTags(e)}\r\n              />\r\n              <div className='form-text'>\r\n                Tags should be separated with a comma. Language tag will be\r\n                added automatically\r\n              </div>\r\n            </div>\r\n\r\n            {/* CODE SECTION */}\r\n            <h5 className='card-title mb-3'>Snippet code</h5>\r\n            <div className='mb-3'>\r\n              <textarea\r\n                className='form-control'\r\n                id='code'\r\n                name='code'\r\n                rows={10}\r\n                value={formData.code}\r\n                placeholder='cp -r ./src ./dest'\r\n                required\r\n                onChange={e => inputHandler(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            {/* AI FEATURES TOGGLE */}\r\n            <div className='mb-3'>\r\n              <div className='form-check'>\r\n                <input\r\n                  className='form-check-input'\r\n                  type='checkbox'\r\n                  id='useAI'\r\n                  checked={useAI}\r\n                  onChange={(e) => setUseAI(e.target.checked)}\r\n                />\r\n                <label className='form-check-label' htmlFor='useAI'>\r\n                  🤖 Enable AI Features (Auto-tagging & Code explanation)\r\n                </label>\r\n              </div>\r\n              <div className='form-text'>\r\n                AI features require an OpenAI API key to be configured\r\n              </div>\r\n            </div>\r\n\r\n            {/* AI AUTO-TAGGER */}\r\n            {useAI && formData.code && formData.language && (\r\n              <div className='mb-3'>\r\n                <AutoTagger\r\n                  code={formData.code}\r\n                  language={formData.language}\r\n                  currentTags={formData.tags}\r\n                  onTagsGenerated={(newTags) => setFormData({...formData, tags: newTags})}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <hr />\r\n\r\n            {/* AI EXPLAINER */}\r\n            {useAI && formData.code && formData.language && (\r\n              <div className='mb-3'>\r\n                <AIExplainer\r\n                  code={formData.code}\r\n                  language={formData.language}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <hr />\r\n\r\n            {/* DOCS SECTION */}\r\n            <h5 className='card-title mb-3'>Snippet documentation</h5>\r\n            <div className='mb-3'>\r\n              <textarea\r\n                className='form-control'\r\n                id='docs'\r\n                name='docs'\r\n                rows={10}\r\n                value={formData.docs}\r\n                placeholder='`-r` flag stands for `--recursive`'\r\n                onChange={e => inputHandler(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            {/* SUBMIT SECTION */}\r\n            <div className='d-grid'>\r\n              <Button\r\n                text={`${inEdit ? 'Update snippet' : 'Create snippet'}`}\r\n                color='secondary'\r\n                type='submit'\r\n              />\r\n            </div>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { SnippetsContext } from '../../store';\r\nimport { NewSnippet } from '../../typescript/interfaces';\r\nimport { Button, Card } from '../UI';\r\n\r\ninterface SmartSnippetFormProps {\r\n  inEdit?: boolean;\r\n}\r\n\r\ninterface AISnippetResponse {\r\n  title: string;\r\n  description: string;\r\n  language: string;\r\n  tags: string[];\r\n  explanation: string;\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport const SmartSnippetForm: React.FC<SmartSnippetFormProps> = ({ inEdit = false }) => {\r\n  const { createSnippet, currentSnippet, updateSnippet } = useContext(SnippetsContext);\r\n\r\n  const [code, setCode] = useState<string>('');\r\n  const [generatedData, setGeneratedData] = useState<Partial<NewSnippet> | null>(null);\r\n  const [isGenerating, setIsGenerating] = useState<boolean>(false);\r\n  const [isEditing, setIsEditing] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  // Editable fields when user wants to modify AI suggestions\r\n  const [editableData, setEditableData] = useState<Partial<NewSnippet>>({\r\n    title: '',\r\n    description: '',\r\n    language: '',\r\n    tags: [],\r\n    docs: '',\r\n    isPinned: false\r\n  });\r\n\r\n  const generateSnippetDetails = async () => {\r\n    if (!code.trim()) {\r\n      setError('Please paste some code first');\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await axios.post<AISnippetResponse>('/api/ai/generate-snippet', {\r\n        code: code.trim()\r\n      });\r\n\r\n      if (response.data.success) {\r\n        const generated = {\r\n          title: response.data.title,\r\n          description: response.data.description,\r\n          language: response.data.language,\r\n          code: code.trim(),\r\n          tags: response.data.tags,\r\n          docs: response.data.explanation,\r\n          isPinned: false\r\n        };\r\n\r\n        setGeneratedData(generated);\r\n        setEditableData(generated);\r\n        setError('');\r\n      } else {\r\n        setError(response.data.error || 'Failed to generate snippet details');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.response?.data?.error || 'Failed to connect to AI service');\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleEditableChange = (field: keyof NewSnippet, value: any) => {\r\n    setEditableData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleTagsChange = (tagsString: string) => {\r\n    const tags = tagsString.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\r\n    handleEditableChange('tags', tags);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!editableData.title || !editableData.code) {\r\n      setError('Title and code are required');\r\n      return;\r\n    }\r\n\r\n    const submissionData = {\r\n      ...editableData,\r\n      code,\r\n      useAI: true\r\n    } as NewSnippet;\r\n\r\n    if (inEdit && currentSnippet) {\r\n      updateSnippet(submissionData, currentSnippet.id);\r\n    } else {\r\n      createSnippet(submissionData);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setCode('');\r\n    setGeneratedData(null);\r\n    setEditableData({\r\n      title: '',\r\n      description: '',\r\n      language: '',\r\n      tags: [],\r\n      docs: '',\r\n      isPinned: false\r\n    });\r\n    setIsEditing(false);\r\n    setError('');\r\n  };\r\n\r\n  return (\r\n    <div className='col-12 mt-3'>\r\n      <Card>\r\n        <div className=\"smart-snippet-form\">\r\n          <h5 className='card-title mb-3'>\r\n            🤖 Smart Snippet Creator\r\n            <small className=\"text-muted d-block mt-1\">\r\n              Just paste your code and let AI generate everything else!\r\n            </small>\r\n          </h5>\r\n\r\n          {error && (\r\n            <div className=\"alert alert-danger mb-3\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {/* Step 1: Code Input */}\r\n          <div className=\"step-1 mb-4\">\r\n            <label htmlFor=\"code\" className=\"form-label\">\r\n              <strong>Step 1:</strong> Paste your code here\r\n            </label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"code\"\r\n              rows={10}\r\n              value={code}\r\n              placeholder=\"// Paste your code here...\r\nfunction fibonacci(n) {\r\n  if (n <= 1) return n;\r\n  return fibonacci(n - 1) + fibonacci(n - 2);\r\n}\"\r\n              onChange={(e) => setCode(e.target.value)}\r\n            />\r\n            <div className=\"d-flex gap-2 mt-2\">\r\n              <Button\r\n                text={isGenerating ? 'Analyzing Code...' : '🧠 Generate Details with AI'}\r\n                color=\"primary\"\r\n                handler={generateSnippetDetails}\r\n                disabled={isGenerating || !code.trim()}\r\n              />\r\n              {generatedData && (\r\n                <Button\r\n                  text=\"🔄 Reset\"\r\n                  color=\"secondary\"\r\n                  outline={true}\r\n                  handler={reset}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Step 2: Generated Details */}\r\n          {generatedData && (\r\n            <div className=\"step-2 mb-4\">\r\n              <hr />\r\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                <h6 className=\"mb-0\">\r\n                  <strong>Step 2:</strong> Review & Edit Generated Details\r\n                </h6>\r\n                <Button\r\n                  text={isEditing ? '📖 View Mode' : '✏️ Edit Mode'}\r\n                  color=\"info\"\r\n                  small={true}\r\n                  outline={true}\r\n                  handler={() => setIsEditing(!isEditing)}\r\n                />\r\n              </div>\r\n\r\n              {!isEditing ? (\r\n                // View Mode\r\n                <div className=\"generated-preview\">\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-8\">\r\n                      <div className=\"card border-success\">\r\n                        <div className=\"card-body\">\r\n                          <h6 className=\"card-title text-success\">\r\n                            📝 {editableData.title}\r\n                          </h6>\r\n                          <p className=\"card-text\">{editableData.description}</p>\r\n                          <div className=\"d-flex gap-2 flex-wrap\">\r\n                            <span className=\"badge bg-primary\">{editableData.language}</span>\r\n                            {editableData.tags?.map((tag, index) => (\r\n                              <span key={index} className=\"badge bg-secondary\">{tag}</span>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                      <div className=\"card border-info\">\r\n                        <div className=\"card-body\">\r\n                          <h6 className=\"card-title text-info\">🤖 AI Explanation</h6>\r\n                          <p className=\"card-text\">\r\n                            <small>{editableData.docs}</small>\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                // Edit Mode\r\n                <div className=\"edit-mode\">\r\n                  <div className=\"row g-3\">\r\n                    <div className=\"col-md-6\">\r\n                      <label className=\"form-label\">Title</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.title || ''}\r\n                        onChange={(e) => handleEditableChange('title', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                      <label className=\"form-label\">Language</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.language || ''}\r\n                        onChange={(e) => handleEditableChange('language', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label\">Description</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.description || ''}\r\n                        onChange={(e) => handleEditableChange('description', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label\">Tags (comma-separated)</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={editableData.tags?.join(', ') || ''}\r\n                        onChange={(e) => handleTagsChange(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label\">Documentation / Explanation</label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        rows={4}\r\n                        value={editableData.docs || ''}\r\n                        onChange={(e) => handleEditableChange('docs', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Step 3: Submit */}\r\n              <hr />\r\n              <div className=\"step-3\">\r\n                <h6><strong>Step 3:</strong> Save Snippet</h6>\r\n                <div className=\"d-grid gap-2 d-md-flex\">\r\n                  <Button\r\n                    text={inEdit ? '💾 Update Snippet' : '💾 Save Snippet'}\r\n                    color=\"success\"\r\n                    handler={handleSubmit}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import { Fragment, useEffect, useContext, useState } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { SnippetForm } from '../components/Snippets/SnippetForm';\r\nimport { SmartSnippetForm } from '../components/Snippets/SmartSnippetForm';\r\nimport { Layout, PageHeader, Button } from '../components/UI';\r\nimport { SnippetsContext } from '../store';\r\n\r\ninterface Params {\r\n  id?: string;\r\n}\r\n\r\nexport const Editor = (): JSX.Element => {\r\n  const { setSnippet: setCurrentSnippet } = useContext(SnippetsContext);\r\n  const [inEdit, setInEdit] = useState(false);\r\n  const [useSmartMode, setUseSmartMode] = useState(true); // Default to smart mode\r\n\r\n  // Get previous location\r\n  const location = useLocation<{ from: string }>();\r\n  const { from } = location.state || '/snippets';\r\n\r\n  // Get id\r\n  const { id } = useParams<Params>();\r\n\r\n  // Set snippet\r\n  useEffect(() => {\r\n    if (id) {\r\n      setCurrentSnippet(+id);\r\n      setInEdit(true);\r\n      setUseSmartMode(false); // Use traditional form for editing\r\n    }\r\n  }, []);\r\n\r\n  const toggleMode = () => {\r\n    setUseSmartMode(!useSmartMode);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {inEdit ? (\r\n        <Fragment>\r\n          <PageHeader<{ from: string }>\r\n            title='Edit snippet'\r\n            prevDest={from}\r\n            prevState={{ from: '/snippets' }}\r\n          />\r\n          <SnippetForm inEdit />\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <PageHeader title='Add new snippet'>\r\n            <div className=\"d-flex gap-2 mt-2\">\r\n              <Button\r\n                text={useSmartMode ? '🤖 Smart Mode' : '📝 Manual Mode'}\r\n                color={useSmartMode ? 'primary' : 'secondary'}\r\n                outline={!useSmartMode}\r\n                handler={toggleMode}\r\n              />\r\n              <span className=\"badge bg-info align-self-center\">\r\n                {useSmartMode ? 'AI-Powered' : 'Traditional'}\r\n              </span>\r\n            </div>\r\n          </PageHeader>\r\n          {useSmartMode ? <SmartSnippetForm /> : <SnippetForm />}\r\n        </Fragment>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PageHeader } from '../components/UI';\r\nimport { SmartSnippetForm } from '../components/Snippets/SmartSnippetForm';\r\n\r\nexport const SmartEditor = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"container-xxl my-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <PageHeader title=\"Smart Snippet Creator\">\r\n            <p className=\"text-muted mb-0\">\r\n              Paste your code and let AI generate the title, description, language, and tags for you.\r\n            </p>\r\n          </PageHeader>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <SmartSnippetForm />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { Navbar } from './components/Navigation/Navbar';\r\nimport { Editor, Home, Snippet, Snippets } from './containers';\r\nimport { SmartEditor } from './containers/SmartEditor';\r\nimport { SnippetsContextProvider } from './store';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <SnippetsContextProvider>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route path='/snippets' component={Snippets} />\r\n          <Route path='/snippet/:id' component={Snippet} />\r\n          <Route path='/editor/:id?' component={Editor} />\r\n          <Route path='/smart-create' component={SmartEditor} />\r\n        </Switch>\r\n      </SnippetsContextProvider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/style.scss';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}